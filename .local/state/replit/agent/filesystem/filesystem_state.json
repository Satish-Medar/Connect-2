{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).send(\"Username already exists\");\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\nexport function requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    next();\n  };\n}\n","size_bytes":3460},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, requireRole } from \"./auth\";\nimport { analyzeIssueImage, detectDuplicateIssue, findSimilarIssues, normalizeLocation } from \"./gemini\";\nimport multer from \"multer\";\nimport sharp from \"sharp\";\nimport { insertIssueSchema, insertValidationSchema, insertCommentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// File upload configuration\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\n// WebSocket clients for real-time updates\nconst wsClients = new Set<WebSocket>();\n\nfunction broadcastUpdate(data: any) {\n  const message = JSON.stringify(data);\n  wsClients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // File upload endpoint\n  app.post(\"/api/upload\", requireAuth, upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n\n      // Process image with Sharp\n      const processedImage = await sharp(req.file.buffer)\n        .resize(1024, 1024, { fit: 'inside', withoutEnlargement: true })\n        .jpeg({ quality: 85 })\n        .toBuffer();\n\n      // Convert to base64 for AI analysis\n      const base64Image = processedImage.toString('base64');\n      \n      // Analyze with AI\n      const analysis = await analyzeIssueImage(base64Image, req.body.description);\n\n      // Store processed image (in a real app, save to cloud storage)\n      const imageUrl = `data:image/jpeg;base64,${base64Image}`;\n\n      res.json({\n        imageUrl,\n        analysis\n      });\n    } catch (error) {\n      console.error(\"Image upload failed:\", error);\n      res.status(500).json({ message: \"Image processing failed\" });\n    }\n  });\n\n  // Issue endpoints\n  app.post(\"/api/issues\", requireAuth, async (req, res) => {\n    try {\n      const issueData = insertIssueSchema.parse({\n        ...req.body,\n        reporterId: req.user!.id\n      });\n\n      // Check for similar issues nearby and return them for user decision (unless force submit)\n      if (issueData.latitude && issueData.longitude && !req.body.forceSubmit) {\n        const normalizedLocation = normalizeLocation(issueData.address || \"\");\n        \n        // Search with larger radius for better detection\n        const nearbyIssues = await storage.getIssuesNearLocation(\n          parseFloat(issueData.latitude),\n          parseFloat(issueData.longitude),\n          0.5 // 500m radius for better coverage\n        );\n\n        if (nearbyIssues.length > 0) {\n          const similarityCheck = await findSimilarIssues(\n            {\n              title: issueData.title,\n              description: issueData.description || \"\",\n              category: issueData.category,\n              location: normalizedLocation,\n              imageUrl: issueData.imageUrl\n            },\n            nearbyIssues.map(i => ({\n              id: i.id,\n              title: i.title,\n              description: i.description || \"\",\n              category: i.category,\n              location: normalizeLocation(i.address || \"\"),\n              imageUrl: i.imageUrl,\n              reportedBy: i.reporter?.username || \"Anonymous\",\n              createdAt: i.createdAt,\n              validationCount: i.validationCount,\n              status: i.status\n            }))\n          );\n\n          // If we find similar issues with medium to high confidence, return them\n          if (similarityCheck.similarIssues && similarityCheck.similarIssues.length > 0) {\n            return res.status(200).json({\n              type: \"similar_issues_found\",\n              message: \"Similar issues found in your area\",\n              similarIssues: similarityCheck.similarIssues,\n              submittedIssue: issueData,\n              canProceedAnyway: true\n            });\n          }\n        }\n      }\n\n      const issue = await storage.createIssue(issueData);\n      \n      // Award points for reporting\n      await storage.updateUserPoints(req.user!.id, 10);\n      \n      // Check for achievements\n      const userIssues = await storage.getIssues({ reporterId: req.user!.id });\n      if (userIssues.length === 1) {\n        await storage.createAchievement(\n          req.user!.id,\n          \"first_reporter\",\n          \"First Reporter\",\n          \"Submitted your first civic issue report\",\n          \"fas fa-camera-retro\"\n        );\n      }\n\n      // Broadcast real-time update\n      broadcastUpdate({\n        type: \"new_issue\",\n        issue: { ...issue, reporter: req.user }\n      });\n\n      res.status(201).json(issue);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid issue data\", errors: error.errors });\n      }\n      console.error(\"Create issue failed:\", error);\n      res.status(500).json({ message: \"Failed to create issue\" });\n    }\n  });\n\n  app.get(\"/api/issues\", async (req, res) => {\n    try {\n      const filters = {\n        category: req.query.category as string,\n        status: req.query.status as string,\n        priority: req.query.priority as string,\n        reporterId: req.query.reporterId as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : 20,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : 0,\n      };\n\n      const issues = await storage.getIssues(filters);\n      res.json(issues);\n    } catch (error) {\n      console.error(\"Get issues failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch issues\" });\n    }\n  });\n\n  app.get(\"/api/issues/:id\", async (req, res) => {\n    try {\n      const issue = await storage.getIssue(req.params.id);\n      if (!issue) {\n        return res.status(404).json({ message: \"Issue not found\" });\n      }\n      res.json(issue);\n    } catch (error) {\n      console.error(\"Get issue failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch issue\" });\n    }\n  });\n\n  // Upvote an issue\n  app.post(\"/api/issues/:id/upvote\", requireAuth, async (req, res) => {\n    try {\n      const issueId = req.params.id;\n      const userId = req.user!.id;\n\n      // Check if issue exists\n      const issue = await storage.getIssue(issueId);\n      if (!issue) {\n        return res.status(404).json({ message: \"Issue not found\" });\n      }\n\n      // Create a validation (upvote) for this issue\n      await storage.createValidation({\n        issueId,\n        userId,\n        isValid: true,\n        note: \"Upvoted via similar issues dialog\"\n      });\n\n      // Award points to the user for validating\n      await storage.updateUserPoints(userId, 2);\n\n      // Update the issue's validation count\n      const updatedIssue = await storage.updateIssue(issueId, {\n        validationCount: (issue.validationCount || 0) + 1\n      });\n\n      res.json({ \n        message: \"Issue upvoted successfully\",\n        validationCount: updatedIssue?.validationCount || 0\n      });\n    } catch (error) {\n      console.error(\"Upvote issue failed:\", error);\n      res.status(500).json({ message: \"Failed to upvote issue\" });\n    }\n  });\n\n  app.patch(\"/api/issues/:id\", requireRole([\"admin\", \"staff\"]), async (req, res) => {\n    try {\n      const updates = req.body;\n      const issue = await storage.updateIssue(req.params.id, updates);\n      \n      if (!issue) {\n        return res.status(404).json({ message: \"Issue not found\" });\n      }\n\n      // Create notification for status updates\n      if (updates.status) {\n        await storage.createNotification(\n          issue.reporterId,\n          \"Issue Status Updated\",\n          `Your report \"${issue.title}\" status changed to ${updates.status}`,\n          \"status_update\",\n          issue.id\n        );\n      }\n\n      // Broadcast real-time update\n      broadcastUpdate({\n        type: \"issue_updated\",\n        issue\n      });\n\n      res.json(issue);\n    } catch (error) {\n      console.error(\"Update issue failed:\", error);\n      res.status(500).json({ message: \"Failed to update issue\" });\n    }\n  });\n\n  app.get(\"/api/issues/near/:lat/:lng\", async (req, res) => {\n    try {\n      const lat = parseFloat(req.params.lat);\n      const lng = parseFloat(req.params.lng);\n      const radius = req.query.radius ? parseFloat(req.query.radius as string) : 5; // 5km default\n\n      const issues = await storage.getIssuesNearLocation(lat, lng, radius);\n      res.json(issues);\n    } catch (error) {\n      console.error(\"Get nearby issues failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch nearby issues\" });\n    }\n  });\n\n  // Validation endpoints\n  app.post(\"/api/issues/:id/validate\", requireAuth, async (req, res) => {\n    try {\n      const validation = insertValidationSchema.parse({\n        issueId: req.params.id,\n        userId: req.user!.id,\n        ...req.body\n      });\n\n      await storage.createValidation(validation);\n      \n      // Award points for validation\n      await storage.updateUserPoints(req.user!.id, 5);\n\n      res.status(201).json({ message: \"Validation recorded\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid validation data\", errors: error.errors });\n      }\n      console.error(\"Create validation failed:\", error);\n      res.status(500).json({ message: \"Failed to create validation\" });\n    }\n  });\n\n  // Comment endpoints\n  app.post(\"/api/issues/:id/comments\", requireAuth, async (req, res) => {\n    try {\n      const comment = insertCommentSchema.parse({\n        issueId: req.params.id,\n        userId: req.user!.id,\n        isOfficial: req.user!.role === \"admin\" || req.user!.role === \"staff\",\n        ...req.body\n      });\n\n      await storage.createComment(comment);\n      res.status(201).json({ message: \"Comment added\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid comment data\", errors: error.errors });\n      }\n      console.error(\"Create comment failed:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // User endpoints\n  app.get(\"/api/users/leaderboard\", async (req, res) => {\n    try {\n      const leaderboard = await storage.getLeaderboard(10);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Get leaderboard failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/achievements\", async (req, res) => {\n    try {\n      const achievements = await storage.getUserAchievements(req.params.id);\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Get achievements failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Notification endpoints\n  app.get(\"/api/notifications\", requireAuth, async (req, res) => {\n    try {\n      const unreadOnly = req.query.unread === \"true\";\n      const notifications = await storage.getUserNotifications(req.user!.id, unreadOnly);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Get notifications failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Mark notification read failed:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Admin/Analytics endpoints\n  app.get(\"/api/admin/stats\", requireRole([\"admin\", \"staff\"]), async (req, res) => {\n    try {\n      const stats = await storage.getIssueStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get stats failed:\", error);\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Setup WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    wsClients.add(ws);\n    console.log('WebSocket client connected');\n\n    ws.on('close', () => {\n      wsClients.delete(ws);\n      console.log('WebSocket client disconnected');\n    });\n\n    // Send initial connection confirmation\n    ws.send(JSON.stringify({ type: 'connected', message: 'WebSocket connection established' }));\n  });\n\n  return httpServer;\n}\n","size_bytes":13092},"server/storage.ts":{"content":"import { \n  users, \n  issues, \n  validations, \n  comments, \n  achievements, \n  notifications,\n  type User, \n  type InsertUser,\n  type Issue,\n  type InsertIssue,\n  type IssueWithReporter,\n  type IssueWithDetails,\n  type InsertValidation,\n  type InsertComment,\n  type Achievement,\n  type Notification\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, sql, count } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Session store\n  sessionStore: session.SessionStore;\n  \n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserPoints(userId: string, points: number): Promise<void>;\n  getLeaderboard(limit?: number): Promise<User[]>;\n  \n  // Issue operations\n  createIssue(issue: InsertIssue): Promise<Issue>;\n  getIssue(id: string): Promise<IssueWithDetails | undefined>;\n  getIssues(filters?: {\n    category?: string;\n    status?: string;\n    priority?: string;\n    reporterId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<IssueWithReporter[]>;\n  updateIssue(id: string, updates: Partial<Issue>): Promise<Issue | undefined>;\n  getIssuesNearLocation(lat: number, lng: number, radiusKm: number): Promise<IssueWithReporter[]>;\n  \n  // Validation operations\n  createValidation(validation: InsertValidation): Promise<void>;\n  getValidationsForIssue(issueId: string): Promise<any[]>;\n  \n  // Comment operations\n  createComment(comment: InsertComment): Promise<void>;\n  getCommentsForIssue(issueId: string): Promise<any[]>;\n  \n  // Achievement operations\n  createAchievement(userId: string, type: string, title: string, description: string, iconName: string): Promise<void>;\n  getUserAchievements(userId: string): Promise<Achievement[]>;\n  \n  // Notification operations\n  createNotification(userId: string, title: string, message: string, type: string, issueId?: string): Promise<void>;\n  getUserNotifications(userId: string, unreadOnly?: boolean): Promise<Notification[]>;\n  markNotificationRead(notificationId: string): Promise<void>;\n  \n  // Analytics\n  getIssueStats(): Promise<{\n    total: number;\n    active: number;\n    inProgress: number;\n    resolved: number;\n    avgResponseTime: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserPoints(userId: string, points: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ points: sql`${users.points} + ${points}` })\n      .where(eq(users.id, userId));\n  }\n\n  async getLeaderboard(limit = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.points))\n      .limit(limit);\n  }\n\n  async createIssue(issue: InsertIssue): Promise<Issue> {\n    const [newIssue] = await db\n      .insert(issues)\n      .values(issue)\n      .returning();\n    return newIssue;\n  }\n\n  async getIssue(id: string): Promise<IssueWithDetails | undefined> {\n    const [issue] = await db\n      .select()\n      .from(issues)\n      .where(eq(issues.id, id));\n    \n    if (!issue) return undefined;\n\n    const [reporter] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, issue.reporterId));\n\n    const assignedUser = issue.assignedTo \n      ? await db.select().from(users).where(eq(users.id, issue.assignedTo)).then(r => r[0])\n      : undefined;\n\n    const issueValidations = await db\n      .select()\n      .from(validations)\n      .leftJoin(users, eq(validations.userId, users.id))\n      .where(eq(validations.issueId, id));\n\n    const issueComments = await db\n      .select()\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.issueId, id))\n      .orderBy(asc(comments.createdAt));\n\n    return {\n      ...issue,\n      reporter,\n      assignedUser,\n      validations: issueValidations.map(v => ({ ...v.validations!, user: v.users! })),\n      comments: issueComments.map(c => ({ ...c.comments!, user: c.users! }))\n    };\n  }\n\n  async getIssues(filters: {\n    category?: string;\n    status?: string;\n    priority?: string;\n    reporterId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}): Promise<IssueWithReporter[]> {\n    let query = db\n      .select()\n      .from(issues)\n      .leftJoin(users, eq(issues.reporterId, users.id));\n\n    const conditions = [];\n    \n    if (filters.category) {\n      conditions.push(eq(issues.category, filters.category));\n    }\n    if (filters.status) {\n      conditions.push(eq(issues.status, filters.status));\n    }\n    if (filters.priority) {\n      conditions.push(eq(issues.priority, filters.priority));\n    }\n    if (filters.reporterId) {\n      conditions.push(eq(issues.reporterId, filters.reporterId));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    query = query.orderBy(desc(issues.createdAt));\n\n    if (filters.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    const results = await query;\n    \n    return results.map(result => ({\n      ...result.issues!,\n      reporter: result.users!\n    }));\n  }\n\n  async updateIssue(id: string, updates: Partial<Issue>): Promise<Issue | undefined> {\n    const [updated] = await db\n      .update(issues)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(issues.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getIssuesNearLocation(lat: number, lng: number, radiusKm: number): Promise<IssueWithReporter[]> {\n    // Simple bounding box calculation for proximity\n    const latDelta = radiusKm / 111; // Rough conversion: 1 degree ≈ 111 km\n    const lngDelta = radiusKm / (111 * Math.cos(lat * Math.PI / 180));\n\n    const results = await db\n      .select()\n      .from(issues)\n      .leftJoin(users, eq(issues.reporterId, users.id))\n      .where(\n        and(\n          sql`${issues.latitude} BETWEEN ${lat - latDelta} AND ${lat + latDelta}`,\n          sql`${issues.longitude} BETWEEN ${lng - lngDelta} AND ${lng + lngDelta}`\n        )\n      );\n\n    return results.map(result => ({\n      ...result.issues!,\n      reporter: result.users!\n    }));\n  }\n\n  async createValidation(validation: InsertValidation): Promise<void> {\n    await db.insert(validations).values(validation);\n    \n    // Update validation count\n    await db\n      .update(issues)\n      .set({ validationCount: sql`${issues.validationCount} + 1` })\n      .where(eq(issues.id, validation.issueId));\n  }\n\n  async getValidationsForIssue(issueId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(validations)\n      .leftJoin(users, eq(validations.userId, users.id))\n      .where(eq(validations.issueId, issueId));\n  }\n\n  async createComment(comment: InsertComment): Promise<void> {\n    await db.insert(comments).values(comment);\n    \n    // Update comment count\n    await db\n      .update(issues)\n      .set({ commentCount: sql`${issues.commentCount} + 1` })\n      .where(eq(issues.id, comment.issueId));\n  }\n\n  async getCommentsForIssue(issueId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.issueId, issueId))\n      .orderBy(asc(comments.createdAt));\n  }\n\n  async createAchievement(userId: string, type: string, title: string, description: string, iconName: string): Promise<void> {\n    await db.insert(achievements).values({\n      userId,\n      type,\n      title,\n      description,\n      iconName\n    });\n  }\n\n  async getUserAchievements(userId: string): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.userId, userId))\n      .orderBy(desc(achievements.unlockedAt));\n  }\n\n  async createNotification(userId: string, title: string, message: string, type: string, issueId?: string): Promise<void> {\n    await db.insert(notifications).values({\n      userId,\n      title,\n      message,\n      type,\n      issueId\n    });\n  }\n\n  async getUserNotifications(userId: string, unreadOnly = false): Promise<Notification[]> {\n    let query = db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId));\n\n    if (unreadOnly) {\n      query = query.where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n    }\n\n    return await query.orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationRead(notificationId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  async getIssueStats(): Promise<{\n    total: number;\n    active: number;\n    inProgress: number;\n    resolved: number;\n    avgResponseTime: number;\n  }> {\n    const [totalResult] = await db.select({ count: count() }).from(issues);\n    const [activeResult] = await db.select({ count: count() }).from(issues).where(eq(issues.status, 'submitted'));\n    const [inProgressResult] = await db.select({ count: count() }).from(issues).where(eq(issues.status, 'in_progress'));\n    const [resolvedResult] = await db.select({ count: count() }).from(issues).where(eq(issues.status, 'resolved'));\n\n    // Calculate average response time (simplified)\n    const avgResponseTime = 2.4; // days - would need more complex query for actual calculation\n\n    return {\n      total: totalResult.count,\n      active: activeResult.count,\n      inProgress: inProgressResult.count,\n      resolved: resolvedResult.count,\n      avgResponseTime\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10447},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  role: text(\"role\").notNull().default(\"citizen\"), // citizen, admin, staff\n  points: integer(\"points\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const issues = pgTable(\"issues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // pothole, lighting, garbage, signage, etc.\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  status: text(\"status\").notNull().default(\"submitted\"), // submitted, acknowledged, in_progress, resolved, closed\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  address: text(\"address\"),\n  imageUrl: text(\"image_url\"),\n  audioUrl: text(\"audio_url\"),\n  aiAnalysis: jsonb(\"ai_analysis\"), // AI classification results\n  aiConfidence: decimal(\"ai_confidence\", { precision: 5, scale: 2 }),\n  severityScore: integer(\"severity_score\").default(0), // 0-100\n  reporterId: varchar(\"reporter_id\").notNull().references(() => users.id),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  departmentRouted: text(\"department_routed\"), // public_works, sanitation, utilities, etc.\n  validationCount: integer(\"validation_count\").default(0),\n  commentCount: integer(\"comment_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\nexport const validations = pgTable(\"validations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  issueId: varchar(\"issue_id\").notNull().references(() => issues.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  isValid: boolean(\"is_valid\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  issueId: varchar(\"issue_id\").notNull().references(() => issues.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  isOfficial: boolean(\"is_official\").default(false), // from municipal staff\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // first_reporter, hot_streak, quality_guard, city_hero\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  iconName: text(\"icon_name\"),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  issueId: varchar(\"issue_id\").references(() => issues.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // status_update, validation, comment, achievement\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  issues: many(issues),\n  validations: many(validations),\n  comments: many(comments),\n  achievements: many(achievements),\n  notifications: many(notifications),\n}));\n\nexport const issuesRelations = relations(issues, ({ one, many }) => ({\n  reporter: one(users, {\n    fields: [issues.reporterId],\n    references: [users.id],\n  }),\n  assignedUser: one(users, {\n    fields: [issues.assignedTo],\n    references: [users.id],\n  }),\n  validations: many(validations),\n  comments: many(comments),\n  notifications: many(notifications),\n}));\n\nexport const validationsRelations = relations(validations, ({ one }) => ({\n  issue: one(issues, {\n    fields: [validations.issueId],\n    references: [issues.id],\n  }),\n  user: one(users, {\n    fields: [validations.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  issue: one(issues, {\n    fields: [comments.issueId],\n    references: [issues.id],\n  }),\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n});\n\nexport const insertIssueSchema = createInsertSchema(issues).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  resolvedAt: true,\n  validationCount: true,\n  commentCount: true,\n});\n\nexport const insertValidationSchema = createInsertSchema(validations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertIssue = z.infer<typeof insertIssueSchema>;\nexport type Issue = typeof issues.$inferSelect;\nexport type IssueWithReporter = Issue & { reporter: User };\nexport type IssueWithDetails = Issue & { \n  reporter: User;\n  assignedUser?: User;\n  validations: (typeof validations.$inferSelect & { user: User })[];\n  comments: (typeof comments.$inferSelect & { user: User })[];\n};\nexport type InsertValidation = z.infer<typeof insertValidationSchema>;\nexport type Validation = typeof validations.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Comment = typeof comments.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":6482},"client/public/sw.js":{"content":"const CACHE_NAME = 'civicconnect-v1';\nconst STATIC_CACHE = 'static-v1';\nconst DYNAMIC_CACHE = 'dynamic-v1';\n\n// Files to cache immediately when service worker installs\nconst STATIC_FILES = [\n  '/',\n  '/manifest.json',\n  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',\n  'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css',\n  'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n];\n\n// Network-first resources (API calls, dynamic content)\nconst NETWORK_FIRST = [\n  '/api/',\n  '/ws'\n];\n\n// Cache-first resources (static assets, images)\nconst CACHE_FIRST = [\n  '.js',\n  '.css',\n  '.png',\n  '.jpg',\n  '.jpeg',\n  '.gif',\n  '.svg',\n  '.woff',\n  '.woff2'\n];\n\n// Install event - cache static files\nself.addEventListener('install', (event) => {\n  console.log('Service Worker: Install event');\n  \n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then(cache => {\n        console.log('Service Worker: Caching static files');\n        return cache.addAll(STATIC_FILES);\n      })\n      .then(() => {\n        return self.skipWaiting();\n      })\n      .catch(error => {\n        console.error('Service Worker: Error caching static files', error);\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker: Activate event');\n  \n  event.waitUntil(\n    caches.keys()\n      .then(cacheNames => {\n        return Promise.all(\n          cacheNames.map(cacheName => {\n            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {\n              console.log('Service Worker: Deleting old cache', cacheName);\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      })\n      .then(() => {\n        return self.clients.claim();\n      })\n  );\n});\n\n// Fetch event - handle requests with different strategies\nself.addEventListener('fetch', (event) => {\n  const requestUrl = new URL(event.request.url);\n  \n  // Skip non-GET requests and chrome-extension requests\n  if (event.request.method !== 'GET' || requestUrl.protocol === 'chrome-extension:') {\n    return;\n  }\n\n  // Handle API requests with network-first strategy\n  if (NETWORK_FIRST.some(path => requestUrl.pathname.startsWith(path))) {\n    event.respondWith(networkFirst(event.request));\n    return;\n  }\n\n  // Handle static assets with cache-first strategy\n  if (CACHE_FIRST.some(ext => requestUrl.pathname.includes(ext))) {\n    event.respondWith(cacheFirst(event.request));\n    return;\n  }\n\n  // Handle navigation requests (pages) with network-first, fallback to offline page\n  if (event.request.mode === 'navigate') {\n    event.respondWith(navigationHandler(event.request));\n    return;\n  }\n\n  // Default: try network first, then cache\n  event.respondWith(networkFirst(event.request));\n});\n\n// Network-first strategy (for API calls and dynamic content)\nasync function networkFirst(request) {\n  try {\n    const networkResponse = await fetch(request);\n    \n    // Cache successful responses\n    if (networkResponse.ok) {\n      const cache = await caches.open(DYNAMIC_CACHE);\n      cache.put(request.url, networkResponse.clone());\n    }\n    \n    return networkResponse;\n  } catch (error) {\n    console.log('Service Worker: Network failed, trying cache', error);\n    \n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n    \n    // If it's an API request and we have no cache, return offline response\n    if (request.url.includes('/api/')) {\n      return new Response(\n        JSON.stringify({ \n          error: 'Offline', \n          message: 'No network connection available' \n        }),\n        {\n          status: 503,\n          statusText: 'Service Unavailable',\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n    \n    throw error;\n  }\n}\n\n// Cache-first strategy (for static assets)\nasync function cacheFirst(request) {\n  const cachedResponse = await caches.match(request);\n  \n  if (cachedResponse) {\n    return cachedResponse;\n  }\n  \n  try {\n    const networkResponse = await fetch(request);\n    \n    if (networkResponse.ok) {\n      const cache = await caches.open(STATIC_CACHE);\n      cache.put(request.url, networkResponse.clone());\n    }\n    \n    return networkResponse;\n  } catch (error) {\n    console.log('Service Worker: Failed to fetch', request.url, error);\n    throw error;\n  }\n}\n\n// Navigation handler (for page requests)\nasync function navigationHandler(request) {\n  try {\n    const networkResponse = await fetch(request);\n    return networkResponse;\n  } catch (error) {\n    console.log('Service Worker: Navigation failed, serving offline page');\n    \n    // Try to serve cached version of the page\n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n    \n    // Serve offline page\n    return caches.match('/');\n  }\n}\n\n// Background sync for offline reports\nself.addEventListener('sync', (event) => {\n  console.log('Service Worker: Background sync', event.tag);\n  \n  if (event.tag === 'sync-reports') {\n    event.waitUntil(syncOfflineReports());\n  }\n});\n\n// Sync offline reports when back online\nasync function syncOfflineReports() {\n  try {\n    // Get offline reports from IndexedDB or localStorage\n    const offlineReports = await getOfflineReports();\n    \n    for (const report of offlineReports) {\n      try {\n        const response = await fetch('/api/issues', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(report.data),\n        });\n        \n        if (response.ok) {\n          // Report synced successfully, remove from offline storage\n          await removeOfflineReport(report.id);\n          \n          // Notify user\n          self.registration.showNotification('Report Synced', {\n            body: `Your offline report \"${report.data.title}\" has been submitted successfully.`,\n            icon: '/icon-192.png',\n            badge: '/icon-192.png',\n            tag: 'sync-success'\n          });\n        }\n      } catch (error) {\n        console.error('Service Worker: Failed to sync report', error);\n      }\n    }\n  } catch (error) {\n    console.error('Service Worker: Background sync failed', error);\n  }\n}\n\n// Push notification handler\nself.addEventListener('push', (event) => {\n  console.log('Service Worker: Push notification received');\n  \n  let notificationData = {\n    title: 'CivicConnect',\n    body: 'You have a new update',\n    icon: '/icon-192.png',\n    badge: '/icon-192.png',\n    data: {}\n  };\n  \n  if (event.data) {\n    try {\n      const data = event.data.json();\n      notificationData = { ...notificationData, ...data };\n    } catch (error) {\n      console.error('Service Worker: Error parsing push data', error);\n    }\n  }\n  \n  event.waitUntil(\n    self.registration.showNotification(notificationData.title, {\n      body: notificationData.body,\n      icon: notificationData.icon,\n      badge: notificationData.badge,\n      data: notificationData.data,\n      actions: [\n        {\n          action: 'view',\n          title: 'View Details'\n        },\n        {\n          action: 'dismiss',\n          title: 'Dismiss'\n        }\n      ]\n    })\n  );\n});\n\n// Notification click handler\nself.addEventListener('notificationclick', (event) => {\n  console.log('Service Worker: Notification clicked', event);\n  \n  event.notification.close();\n  \n  if (event.action === 'view') {\n    // Open the app to the relevant page\n    const urlToOpen = event.notification.data.url || '/';\n    \n    event.waitUntil(\n      clients.matchAll({ type: 'window', includeUncontrolled: true })\n        .then(clientList => {\n          // Check if app is already open\n          for (const client of clientList) {\n            if (client.url.includes(self.location.origin) && 'focus' in client) {\n              client.focus();\n              client.navigate(urlToOpen);\n              return;\n            }\n          }\n          \n          // App not open, open new window\n          if (clients.openWindow) {\n            return clients.openWindow(urlToOpen);\n          }\n        })\n    );\n  }\n});\n\n// Helper functions for offline storage (simplified for demo)\nasync function getOfflineReports() {\n  // In a real implementation, this would use IndexedDB\n  // For now, return empty array\n  return [];\n}\n\nasync function removeOfflineReport(id) {\n  // In a real implementation, this would remove from IndexedDB\n  console.log('Service Worker: Remove offline report', id);\n}\n\n// Handle service worker errors\nself.addEventListener('error', (event) => {\n  console.error('Service Worker: Error occurred', event.error);\n});\n\nself.addEventListener('unhandledrejection', (event) => {\n  console.error('Service Worker: Unhandled promise rejection', event.reason);\n});\n\n// Periodic background sync for checking updates\nself.addEventListener('periodicsync', (event) => {\n  if (event.tag === 'check-updates') {\n    event.waitUntil(checkForUpdates());\n  }\n});\n\nasync function checkForUpdates() {\n  try {\n    // Check for app updates or new reports\n    const response = await fetch('/api/health');\n    if (response.ok) {\n      console.log('Service Worker: App is healthy, checking for updates');\n      // Could implement update checking logic here\n    }\n  } catch (error) {\n    console.log('Service Worker: Update check failed', error);\n  }\n}\n\n// Message handler for communication with main app\nself.addEventListener('message', (event) => {\n  console.log('Service Worker: Message received', event.data);\n  \n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n  \n  if (event.data && event.data.type === 'CACHE_URLS') {\n    event.waitUntil(\n      caches.open(DYNAMIC_CACHE)\n        .then(cache => cache.addAll(event.data.payload))\n    );\n  }\n});\n","size_bytes":9943},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport ReportPage from \"@/pages/report-page\";\nimport MapPage from \"@/pages/map-page\";\nimport MyReportsPage from \"@/pages/my-reports-page\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <ProtectedRoute path=\"/report\" component={ReportPage} />\n      <ProtectedRoute path=\"/map\" component={MapPage} />\n      <ProtectedRoute path=\"/my-reports\" component={MyReportsPage} />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1418},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(24, 70%, 56%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(24, 70%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 47%, 11%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 2px 4px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 4px 6px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 8px 10px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 28%, 17%);\n  --muted-foreground: hsl(217, 10%, 65%);\n  --accent: hsl(24, 70%, 56%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(213, 31%, 91%);\n  --border: hsl(215, 28%, 17%);\n  --input: hsl(215, 28%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(24, 70%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(217, 33%, 17%);\n  --sidebar-foreground: hsl(213, 31%, 91%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(215, 28%, 17%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(215, 28%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* PWA specific styles matching design reference */\n.ai-processing {\n  background: linear-gradient(90deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%);\n  background-size: 200% 200%;\n  animation: gradient 2s ease-in-out infinite;\n}\n\n@keyframes gradient {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n.map-container {\n  height: 400px;\n  background: linear-gradient(135deg, hsl(var(--muted)) 0%, hsl(var(--background)) 100%);\n}\n\n.badge-glow {\n  box-shadow: 0 0 20px hsl(var(--accent) / 0.3);\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.8; }\n}\n\n.report-card {\n  transition: all 0.3s ease;\n}\n\n.report-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px hsl(var(--foreground) / 0.1);\n}\n\n/* Leaflet map custom styles */\n.leaflet-container {\n  font-family: var(--font-sans);\n  border-radius: var(--radius);\n}\n\n.leaflet-popup-content {\n  margin: 8px 12px;\n  line-height: 1.4;\n  font-family: var(--font-sans);\n}\n\n.leaflet-popup-content h4 {\n  margin: 0 0 4px 0;\n  font-weight: 600;\n  color: hsl(var(--foreground));\n}\n\n.leaflet-popup-content-wrapper {\n  border-radius: var(--radius);\n}\n\n.leaflet-popup-tip {\n  background: white;\n}\n\n.user-location-marker {\n  animation: pulse-location 2s infinite;\n}\n\n@keyframes pulse-location {\n  0% { transform: scale(1); opacity: 1; }\n  50% { transform: scale(1.1); opacity: 0.8; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n.issue-cluster-marker {\n  animation: none;\n  transition: transform 0.2s ease;\n}\n\n.issue-cluster-marker:hover {\n  transform: scale(1.1);\n}\n\n/* PWA install prompt styles */\n.pwa-install-prompt {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%);\n  color: white;\n  padding: 1rem;\n  border-radius: var(--radius);\n  margin: 1rem 0;\n  text-align: center;\n}\n\n.pwa-install-prompt button {\n  background: rgba(255, 255, 255, 0.2);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: calc(var(--radius) - 2px);\n  margin-top: 0.5rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.pwa-install-prompt button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-1px);\n}\n\n/* Camera preview styles */\n.camera-preview {\n  position: relative;\n  background: #000;\n  border-radius: var(--radius);\n  overflow: hidden;\n}\n\n.camera-preview video {\n  width: 100%;\n  height: auto;\n  display: block;\n}\n\n.camera-controls {\n  position: absolute;\n  bottom: 1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 0.5rem;\n}\n\n/* Loading states */\n.skeleton {\n  background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--background)) 50%, hsl(var(--muted)) 75%);\n  background-size: 200% 100%;\n  animation: skeleton-loading 1.5s infinite;\n  border-radius: var(--radius);\n}\n\n@keyframes skeleton-loading {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n/* Success animations */\n.success-checkmark {\n  animation: checkmark-scale 0.5s ease-in-out;\n}\n\n@keyframes checkmark-scale {\n  0% { transform: scale(0); }\n  50% { transform: scale(1.2); }\n  100% { transform: scale(1); }\n}\n\n/* Status indicator colors matching design */\n.status-submitted {\n  background-color: hsl(var(--destructive));\n  color: hsl(var(--destructive-foreground));\n}\n\n.status-acknowledged {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n}\n\n.status-in-progress {\n  background-color: hsl(var(--accent));\n  color: hsl(var(--accent-foreground));\n}\n\n.status-resolved {\n  background-color: hsl(var(--secondary));\n  color: hsl(var(--secondary-foreground));\n}\n\n/* Priority indicator colors */\n.priority-urgent {\n  background-color: hsl(var(--destructive));\n  color: hsl(var(--destructive-foreground));\n}\n\n.priority-high {\n  background-color: hsl(var(--accent));\n  color: hsl(var(--accent-foreground));\n}\n\n.priority-medium {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n}\n\n.priority-low {\n  background-color: hsl(var(--muted));\n  color: hsl(var(--muted-foreground));\n}\n\n/* Custom scrollbar for better aesthetics */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n  .container {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  \n  .report-card {\n    margin-bottom: 0.5rem;\n  }\n  \n  .map-container {\n    height: 300px;\n  }\n  \n  /* Optimize touch targets for mobile */\n  button, input, select, textarea {\n    min-height: 44px;\n  }\n  \n  /* Improve spacing on mobile */\n  .grid {\n    gap: 0.75rem;\n  }\n}\n\n/* Tablet optimizations */\n@media (min-width: 768px) and (max-width: 1024px) {\n  .container {\n    padding-left: 2rem;\n    padding-right: 2rem;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .report-card {\n    break-inside: avoid;\n    page-break-inside: avoid;\n    border: 1px solid #000;\n    margin-bottom: 1rem;\n  }\n  \n  body {\n    font-size: 12pt;\n    line-height: 1.4;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    page-break-after: avoid;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  :root {\n    --border: hsl(0, 0%, 0%);\n    --input: hsl(0, 0%, 100%);\n    --muted: hsl(0, 0%, 85%);\n    --muted-foreground: hsl(0, 0%, 15%);\n  }\n  \n  .dark {\n    --border: hsl(0, 0%, 100%);\n    --input: hsl(0, 0%, 0%);\n    --muted: hsl(0, 0%, 15%);\n    --muted-foreground: hsl(0, 0%, 85%);\n  }\n  \n  button, .button {\n    border: 2px solid currentColor;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  .ai-processing {\n    animation: none;\n    background: hsl(var(--primary));\n  }\n  \n  .badge-glow {\n    animation: none;\n    box-shadow: none;\n  }\n  \n  .report-card {\n    transition: none;\n  }\n  \n  .user-location-marker {\n    animation: none;\n  }\n  \n  .issue-cluster-marker {\n    transition: none;\n  }\n  \n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Focus styles for accessibility */\nbutton:focus-visible,\ninput:focus-visible,\nselect:focus-visible,\ntextarea:focus-visible,\n[tabindex]:focus-visible {\n  outline: 2px solid hsl(var(--ring));\n  outline-offset: 2px;\n  border-radius: var(--radius);\n}\n\n/* Remove focus outline for mouse users */\nbutton:focus:not(:focus-visible),\ninput:focus:not(:focus-visible),\nselect:focus:not(:focus-visible),\ntextarea:focus:not(:focus-visible) {\n  outline: none;\n}\n\n/* Screen reader only text */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Skip link for accessibility */\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 6px;\n  background: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n  padding: 8px;\n  border-radius: var(--radius);\n  text-decoration: none;\n  z-index: 100;\n  transition: top 0.3s;\n}\n\n.skip-link:focus {\n  top: 6px;\n}\n\n/* Notification styles */\n.notification-badge {\n  background: hsl(var(--destructive));\n  color: hsl(var(--destructive-foreground));\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75rem;\n  font-weight: 600;\n  position: absolute;\n  top: -8px;\n  right: -8px;\n}\n\n/* Achievement badge styles */\n.achievement-badge {\n  background: linear-gradient(135deg, hsl(var(--accent)) 0%, hsl(var(--secondary)) 100%);\n  color: white;\n  padding: 0.25rem 0.5rem;\n  border-radius: var(--radius);\n  font-size: 0.75rem;\n  font-weight: 600;\n  box-shadow: 0 2px 4px hsl(var(--foreground) / 0.1);\n}\n\n/* Loading spinner */\n.loading-spinner {\n  border: 2px solid hsl(var(--muted));\n  border-top: 2px solid hsl(var(--primary));\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Image upload area */\n.upload-area {\n  border: 2px dashed hsl(var(--border));\n  border-radius: var(--radius);\n  padding: 2rem;\n  text-align: center;\n  transition: all 0.3s ease;\n  background: hsl(var(--muted) / 0.3);\n}\n\n.upload-area:hover {\n  border-color: hsl(var(--primary));\n  background: hsl(var(--primary) / 0.05);\n}\n\n.upload-area.dragover {\n  border-color: hsl(var(--primary));\n  background: hsl(var(--primary) / 0.1);\n  transform: scale(1.02);\n}\n\n/* Form validation styles */\n.form-error {\n  color: hsl(var(--destructive));\n  font-size: 0.875rem;\n  margin-top: 0.25rem;\n}\n\n.form-success {\n  color: hsl(var(--secondary));\n  font-size: 0.875rem;\n  margin-top: 0.25rem;\n}\n\ninput:invalid, textarea:invalid, select:invalid {\n  border-color: hsl(var(--destructive));\n}\n\ninput:valid, textarea:valid, select:valid {\n  border-color: hsl(var(--border));\n}\n\n/* Toast notification overrides */\n.toast {\n  border-radius: var(--radius);\n  box-shadow: 0 4px 12px hsl(var(--foreground) / 0.15);\n}\n\n.toast[data-state=\"open\"] {\n  animation: slideIn 0.2s ease-out;\n}\n\n.toast[data-state=\"closed\"] {\n  animation: slideOut 0.2s ease-in;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slideOut {\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n}\n\n/* Custom utility classes */\n.text-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.glass-effect {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 40px hsl(var(--foreground) / 0.1);\n}\n\n/* Ensure proper z-index layering */\n.leaflet-control-container {\n  z-index: 10;\n}\n\n.leaflet-popup {\n  z-index: 20;\n}\n\n/* Custom emoji and icon spacing */\n.icon-text {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n/* Responsive text sizes */\n@media (max-width: 640px) {\n  h1 {\n    font-size: 1.5rem;\n    line-height: 2rem;\n  }\n  \n  h2 {\n    font-size: 1.25rem;\n    line-height: 1.75rem;\n  }\n  \n  h3 {\n    font-size: 1.125rem;\n    line-height: 1.5rem;\n  }\n}\n\n/* Custom component animations */\n.fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes slideUp {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n/* Ensure consistent spacing and typography */\n.prose {\n  line-height: 1.6;\n}\n\n.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {\n  margin-top: 1.5em;\n  margin-bottom: 0.5em;\n  font-weight: 600;\n}\n\n.prose p {\n  margin-bottom: 1em;\n}\n\n.prose ul, .prose ol {\n  margin-bottom: 1em;\n  padding-left: 1.5em;\n}\n\n.prose li {\n  margin-bottom: 0.25em;\n}\n","size_bytes":15011},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"./lib/i18n\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":178},"client/src/components/ai-analysis.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, AlertTriangle, Route, Brain } from \"lucide-react\";\n\nexport function AIAnalysis() {\n  const [analysisState, setAnalysisState] = useState<\"processing\" | \"complete\">(\"processing\");\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setAnalysisState(\"complete\");\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <Card data-testid=\"ai-analysis-card\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">AI Analysis</CardTitle>\n          <Badge \n            className={\n              analysisState === \"processing\" \n                ? \"ai-processing text-white animate-pulse\" \n                : \"bg-secondary text-secondary-foreground\"\n            }\n            data-testid=\"ai-status-badge\"\n          >\n            <Brain className=\"w-3 h-3 mr-1\" />\n            {analysisState === \"processing\" ? \"Processing...\" : \"Analysis Complete\"}\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Demo Image */}\n        <div className=\"bg-muted rounded-lg p-4 mb-4\">\n          <div \n            className=\"w-full h-48 bg-gradient-to-br from-gray-200 to-gray-300 rounded-lg flex items-center justify-center text-muted-foreground\"\n            data-testid=\"demo-image-placeholder\"\n          >\n            📸 Sample Issue Photo\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          <div \n            className={`flex items-center justify-between p-3 rounded-lg transition-all ${\n              analysisState === \"complete\" ? \"bg-secondary/10\" : \"bg-muted/50\"\n            }`}\n            data-testid=\"ai-result-detection\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className={analysisState === \"complete\" ? \"text-secondary\" : \"text-muted-foreground\"} />\n              <span className=\"font-medium\">\n                {analysisState === \"complete\" ? \"Issue Detected: Pothole\" : \"Detecting issue type...\"}\n              </span>\n            </div>\n            <span className=\"text-sm text-muted-foreground\">\n              {analysisState === \"complete\" ? \"98% confidence\" : \"Processing...\"}\n            </span>\n          </div>\n          \n          <div \n            className={`flex items-center justify-between p-3 rounded-lg transition-all ${\n              analysisState === \"complete\" ? \"bg-accent/10\" : \"bg-muted/50\"\n            }`}\n            data-testid=\"ai-result-severity\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <AlertTriangle className={analysisState === \"complete\" ? \"text-accent\" : \"text-muted-foreground\"} />\n              <span className=\"font-medium\">\n                {analysisState === \"complete\" ? \"Severity: High Priority\" : \"Analyzing severity...\"}\n              </span>\n            </div>\n            <span className=\"text-sm text-muted-foreground\">\n              {analysisState === \"complete\" ? \"Size: Large\" : \"Processing...\"}\n            </span>\n          </div>\n          \n          <div \n            className={`flex items-center justify-between p-3 rounded-lg transition-all ${\n              analysisState === \"complete\" ? \"bg-primary/10\" : \"bg-muted/50\"\n            }`}\n            data-testid=\"ai-result-routing\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <Route className={analysisState === \"complete\" ? \"text-primary\" : \"text-muted-foreground\"} />\n              <span className=\"font-medium\">\n                {analysisState === \"complete\" ? \"Routed to: Public Works Dept.\" : \"Determining routing...\"}\n              </span>\n            </div>\n            <span className=\"text-sm text-muted-foreground\">\n              {analysisState === \"complete\" ? \"Auto-assigned\" : \"Processing...\"}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4108},"client/src/components/bottom-nav.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, Map, List, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function BottomNav() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { href: \"/\", icon: Home, label: \"Home\", testId: \"nav-home\" },\n    { href: \"/map\", icon: Map, label: \"Map\", testId: \"nav-map\" },\n    { href: \"/my-reports\", icon: List, label: \"My Reports\", testId: \"nav-reports\" },\n    { href: \"/profile\", icon: User, label: \"Profile\", testId: \"nav-profile\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border md:hidden z-40\">\n      <div className=\"grid grid-cols-4 h-16\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={`h-full rounded-none flex flex-col items-center justify-center space-y-1 ${\n                  isActive ? 'text-primary bg-primary/10' : 'text-muted-foreground'\n                }`}\n                data-testid={item.testId}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs\">{item.label}</span>\n              </Button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1445},"client/src/components/issue-map.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { IssueWithReporter } from \"@shared/schema\";\n\ninterface IssueMapProps {\n  issues: IssueWithReporter[];\n  center?: [number, number] | null;\n  userLocation?: [number, number];\n  className?: string;\n  onIssueClick?: (issue: IssueWithReporter) => void;\n}\n\nexport function IssueMap({ \n  issues, \n  center, \n  userLocation, \n  className = \"h-96\",\n  onIssueClick \n}: IssueMapProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const markersRef = useRef<any[]>([]);\n\n  useEffect(() => {\n    // Dynamically import Leaflet to avoid SSR issues\n    const initMap = async () => {\n      const L = (await import('leaflet')).default;\n      \n      // Import CSS\n      await import('leaflet/dist/leaflet.css');\n\n      // Fix default markers issue\n      const DefaultIcon = L.icon({\n        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [1, -34],\n        shadowSize: [41, 41]\n      });\n      L.Marker.prototype.options.icon = DefaultIcon;\n\n      if (!mapRef.current || mapInstanceRef.current) return;\n\n      // Initialize map\n      const defaultCenter: [number, number] = center || userLocation || [40.7128, -74.0060]; // NYC default\n      const map = L.map(mapRef.current).setView(defaultCenter, 13);\n\n      // Add tile layer\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 19,\n      }).addTo(map);\n\n      mapInstanceRef.current = map;\n\n      // Add user location marker if available\n      if (userLocation) {\n        const userIcon = L.divIcon({\n          className: 'user-location-marker',\n          html: `\n            <div style=\"\n              width: 20px; \n              height: 20px; \n              background: #4F95FF; \n              border: 3px solid white; \n              border-radius: 50%; \n              box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n            \"></div>\n          `,\n          iconSize: [20, 20],\n          iconAnchor: [10, 10],\n        });\n\n        L.marker(userLocation, { icon: userIcon })\n          .addTo(map)\n          .bindPopup('Your Location');\n      }\n    };\n\n    initMap();\n\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update markers when issues change\n  useEffect(() => {\n    if (!mapInstanceRef.current) return;\n\n    const L = require('leaflet');\n    \n    // Clear existing markers\n    markersRef.current.forEach(marker => {\n      mapInstanceRef.current.removeLayer(marker);\n    });\n    markersRef.current = [];\n\n    // Create marker clusters\n    const issueGroups = new Map<string, IssueWithReporter[]>();\n    \n    issues.forEach(issue => {\n      // Group issues by approximate location (to 3 decimal places for clustering)\n      const lat = parseFloat(issue.latitude);\n      const lng = parseFloat(issue.longitude);\n      const key = `${lat.toFixed(3)},${lng.toFixed(3)}`;\n      \n      if (!issueGroups.has(key)) {\n        issueGroups.set(key, []);\n      }\n      issueGroups.get(key)!.push(issue);\n    });\n\n    // Create markers for each group\n    issueGroups.forEach((groupIssues, locationKey) => {\n      const [lat, lng] = locationKey.split(',').map(Number);\n      \n      if (groupIssues.length === 1) {\n        // Single issue marker\n        const issue = groupIssues[0];\n        const color = getStatusColor(issue.status);\n        \n        const marker = L.circleMarker([lat, lng], {\n          radius: 8,\n          fillColor: color,\n          color: 'white',\n          weight: 2,\n          opacity: 1,\n          fillOpacity: 0.8\n        });\n\n        marker.bindPopup(`\n          <div style=\"min-width: 200px;\">\n            <h4 style=\"margin: 0 0 8px 0; font-weight: bold;\">${issue.title}</h4>\n            <p style=\"margin: 0 0 4px 0; color: #666; font-size: 12px;\">\n              By ${issue.reporter.username} • ${issue.category}\n            </p>\n            <p style=\"margin: 0 0 8px 0; color: #666; font-size: 12px;\">\n              Status: ${issue.status.replace('_', ' ')} • Priority: ${issue.priority}\n            </p>\n            ${issue.address ? `<p style=\"margin: 0 0 8px 0; color: #666; font-size: 12px;\">📍 ${issue.address}</p>` : ''}\n            <div style=\"display: flex; align-items: center; gap: 12px; font-size: 11px; color: #666;\">\n              <span>👍 ${issue.validationCount} verified</span>\n              <span>💬 ${issue.commentCount} comments</span>\n            </div>\n          </div>\n        `);\n\n        marker.on('click', () => {\n          onIssueClick?.(issue);\n        });\n\n        marker.addTo(mapInstanceRef.current);\n        markersRef.current.push(marker);\n      } else {\n        // Cluster marker\n        const urgentCount = groupIssues.filter(i => i.priority === 'urgent' || i.priority === 'high').length;\n        const color = urgentCount > 0 ? '#EF4444' : '#4F95FF';\n        \n        const clusterIcon = L.divIcon({\n          className: 'issue-cluster-marker',\n          html: `\n            <div style=\"\n              width: 32px; \n              height: 32px; \n              background: ${color}; \n              color: white; \n              border: 3px solid white; \n              border-radius: 50%; \n              display: flex; \n              align-items: center; \n              justify-content: center; \n              font-weight: bold; \n              font-size: 12px;\n              box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n            \">${groupIssues.length}</div>\n          `,\n          iconSize: [32, 32],\n          iconAnchor: [16, 16],\n        });\n\n        const marker = L.marker([lat, lng], { icon: clusterIcon });\n\n        const popupContent = `\n          <div style=\"min-width: 250px;\">\n            <h4 style=\"margin: 0 0 8px 0; font-weight: bold;\">${groupIssues.length} Issues in this area</h4>\n            <div style=\"max-height: 200px; overflow-y: auto;\">\n              ${groupIssues.map(issue => `\n                <div style=\"padding: 4px 0; border-bottom: 1px solid #eee; margin-bottom: 4px;\">\n                  <div style=\"font-weight: 500; font-size: 13px;\">${issue.title}</div>\n                  <div style=\"font-size: 11px; color: #666;\">\n                    ${issue.category} • ${issue.status.replace('_', ' ')} • ${issue.priority} priority\n                  </div>\n                </div>\n              `).join('')}\n            </div>\n          </div>\n        `;\n\n        marker.bindPopup(popupContent);\n        marker.addTo(mapInstanceRef.current);\n        markersRef.current.push(marker);\n      }\n    });\n\n    // Fit map to show all markers if we have issues\n    if (issues.length > 0 && !center) {\n      const group = new L.featureGroup(markersRef.current);\n      mapInstanceRef.current.fitBounds(group.getBounds().pad(0.1));\n    }\n  }, [issues, onIssueClick]);\n\n  // Update map center when center prop changes\n  useEffect(() => {\n    if (mapInstanceRef.current && center) {\n      mapInstanceRef.current.setView(center, 15);\n    }\n  }, [center]);\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'submitted': return '#EF4444'; // red\n      case 'acknowledged': return '#F59E0B'; // yellow\n      case 'in_progress': return '#F97316'; // orange\n      case 'resolved': return '#10B981'; // green\n      default: return '#6B7280'; // gray\n    }\n  }\n\n  return (\n    <div \n      ref={mapRef} \n      className={className}\n      data-testid=\"issue-map\"\n      style={{ width: '100%', zIndex: 0 }}\n    />\n  );\n}\n","size_bytes":7777},"client/src/components/navigation.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MapPin, Bell, User, LogOut, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { LanguageSelector } from \"./language-selector\";\nimport { useTranslation } from 'react-i18next';\n\nexport function Navigation() {\n  const { user, logoutMutation } = useAuth();\n  const { t } = useTranslation();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-card/95 backdrop-blur-md border-b border-border\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-4 cursor-pointer\" data-testid=\"nav-logo\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <MapPin className=\"text-primary-foreground text-xl\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold\">{t('appName')}</h1>\n                <p className=\"text-xs text-muted-foreground\">Smart Civic Reporting</p>\n              </div>\n            </div>\n          </Link>\n          \n          <div className=\"flex items-center space-x-4\">\n            <LanguageSelector />\n            \n            {user && (\n              <>\n                <Badge variant=\"secondary\" className=\"bg-accent/10 text-accent border-accent/20\" data-testid=\"nav-points\">\n                  <span className=\"mr-1\">🏆</span>\n                  {user.points.toLocaleString()} {t('points')}\n                </Badge>\n                \n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"nav-notifications\">\n                  <Bell className=\"h-5 w-5\" />\n                </Button>\n\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid=\"nav-user-menu\">\n                      <User className=\"h-5 w-5\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem data-testid=\"menu-profile\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      {t('profile')}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem data-testid=\"menu-settings\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Settings\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      {t('logout')}\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3134},"client/src/components/pwa-install-prompt.tsx":{"content":"import { useState } from 'react';\nimport { usePWA } from '@/hooks/use-pwa';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { X, Download, Smartphone } from 'lucide-react';\nimport { useTranslation } from 'react-i18next';\n\nexport function PWAInstallPrompt() {\n  const { isInstallable, isInstalled, installApp } = usePWA();\n  const [dismissed, setDismissed] = useState(false);\n  const { t } = useTranslation();\n\n  if (!isInstallable || isInstalled || dismissed) {\n    return null;\n  }\n\n  const handleInstall = async () => {\n    const installed = await installApp();\n    if (!installed) {\n      setDismissed(true);\n    }\n  };\n\n  const handleDismiss = () => {\n    setDismissed(true);\n  };\n\n  return (\n    <Card className=\"bg-gradient-to-r from-primary to-secondary text-white border-0 mb-6\" data-testid=\"pwa-install-prompt\">\n      <CardContent className=\"p-4 relative\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute top-2 right-2 text-white hover:bg-white/20\"\n          onClick={handleDismiss}\n          data-testid=\"button-dismiss-install\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex-shrink-0\">\n            <Smartphone className=\"h-8 w-8\" />\n          </div>\n          \n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold mb-1\">{t('installPromptTitle')}</h3>\n            <p className=\"text-sm opacity-90 mb-3\">\n              {t('installPromptMessage')}\n            </p>\n            \n            <div className=\"flex space-x-2\">\n              <Button\n                onClick={handleInstall}\n                className=\"bg-white/20 hover:bg-white/30 border border-white/30 text-white\"\n                size=\"sm\"\n                data-testid=\"button-install-app\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {t('install')}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2120},"client/src/components/report-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThumbsUp, MessageCircle } from \"lucide-react\";\nimport { IssueWithReporter } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ReportCardProps {\n  issue: IssueWithReporter;\n}\n\nexport function ReportCard({ issue }: ReportCardProps) {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-destructive/10 text-destructive border-destructive/20\";\n      case \"high\": return \"bg-accent/10 text-accent border-accent/20\";\n      case \"medium\": return \"bg-primary/10 text-primary border-primary/20\";\n      default: return \"bg-muted/50 text-muted-foreground border-muted\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"resolved\": return \"bg-secondary/10 text-secondary border-secondary/20\";\n      case \"in_progress\": return \"bg-accent/10 text-accent border-accent/20\";\n      case \"acknowledged\": return \"bg-primary/10 text-primary border-primary/20\";\n      default: return \"bg-muted/50 text-muted-foreground border-muted\";\n    }\n  };\n\n  return (\n    <Card className=\"report-card transition-all hover:shadow-md\" data-testid={`report-card-${issue.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            {issue.imageUrl && (\n              <img \n                src={issue.imageUrl} \n                alt={issue.title}\n                className=\"w-16 h-16 object-cover rounded-lg\"\n                data-testid={`report-image-${issue.id}`}\n              />\n            )}\n            <div>\n              <h4 className=\"font-medium\" data-testid={`report-title-${issue.id}`}>{issue.title}</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Reported by <span data-testid={`report-author-${issue.id}`}>{issue.reporter.username}</span> • {\" \"}\n                <span data-testid={`report-time-${issue.id}`}>\n                  {formatDistanceToNow(new Date(issue.createdAt))} ago\n                </span>\n              </p>\n              {issue.address && (\n                <p className=\"text-sm text-muted-foreground\" data-testid={`report-address-${issue.id}`}>\n                  📍 {issue.address}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              className={getPriorityColor(issue.priority)}\n              data-testid={`report-priority-${issue.id}`}\n            >\n              {issue.priority} Priority\n            </Badge>\n            <Badge \n              className={getStatusColor(issue.status)}\n              data-testid={`report-status-${issue.id}`}\n            >\n              {issue.status.replace('_', ' ')}\n            </Badge>\n          </div>\n        </div>\n        \n        {/* Community Validation */}\n        <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-secondary hover:text-secondary/80\"\n              data-testid={`button-validate-${issue.id}`}\n            >\n              <ThumbsUp className=\"w-4 h-4 mr-1\" />\n              <span data-testid={`validation-count-${issue.id}`}>\n                {issue.validationCount} verified\n              </span>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid={`button-comment-${issue.id}`}\n            >\n              <MessageCircle className=\"w-4 h-4 mr-1\" />\n              <span data-testid={`comment-count-${issue.id}`}>\n                {issue.commentCount} comments\n              </span>\n            </Button>\n          </div>\n          {issue.aiConfidence && (\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n              <span className=\"text-primary\">🤖</span>\n              <span data-testid={`ai-confidence-${issue.id}`}>\n                AI Confidence: {Math.round(parseFloat(issue.aiConfidence) * 100)}%\n              </span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4496},"client/src/components/report-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useCamera } from \"@/hooks/use-camera\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SimilarIssuesDialog } from \"./similar-issues-dialog\";\nimport { Camera, MapPin, Mic, Upload, Loader2, X, CheckCircle } from \"lucide-react\";\n\ninterface ReportFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport function ReportForm({ onSuccess, onCancel }: ReportFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    address: \"\",\n  });\n  \n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [aiAnalysis, setAiAnalysis] = useState<any>(null);\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [similarIssues, setSimilarIssues] = useState<any[]>([]);\n  const [showSimilarIssuesDialog, setShowSimilarIssuesDialog] = useState(false);\n  const [pendingIssueData, setPendingIssueData] = useState<any>(null);\n  \n  const camera = useCamera();\n  const geolocation = useGeolocation();\n\n  // Upload and analyze image\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const uploadFormData = new FormData();\n      uploadFormData.append('image', file);\n      uploadFormData.append('description', formData.description || '');\n      \n      const res = await apiRequest(\"POST\", \"/api/upload\", uploadFormData);\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      setAiAnalysis(data.analysis);\n      setUploadedImageUrl(data.imageUrl); // Store the uploaded image URL\n      // Auto-fill form with AI analysis results\n      setFormData(prev => ({\n        ...prev,\n        category: data.analysis.category,\n        title: data.analysis.description,\n        description: prev.description || data.analysis.description\n      }));\n      toast({\n        title: \"🤖 AI Analysis Complete!\",\n        description: `Detected: ${data.analysis.category} (${Math.round(data.analysis.confidence * 100)}% confidence). Form auto-filled!`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto-upload when camera captures an image\n  useEffect(() => {\n    if (camera.capturedImage && !uploadMutation.isPending && !aiAnalysis) {\n      // Convert captured image to File and upload\n      fetch(camera.capturedImage)\n        .then(res => res.blob())\n        .then(blob => {\n          const file = new File([blob], \"camera-capture.jpg\", { type: \"image/jpeg\" });\n          setImageFile(file);\n          uploadMutation.mutate(file);\n        })\n        .catch(error => {\n          console.error('Failed to convert captured image:', error);\n          toast({\n            title: \"Upload failed\",\n            description: \"Failed to process captured image\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [camera.capturedImage, uploadMutation.isPending, aiAnalysis]);\n\n  // Submit issue report with enhanced duplicate detection\n  const submitMutation = useMutation({\n    mutationFn: async (issueData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/issues\", issueData);\n      const data = await res.json();\n      \n      // Check if similar issues were found\n      if (data.type === 'similar_issues_found') {\n        return { type: 'similar_issues', data };\n      }\n      \n      return { type: 'success', data };\n    },\n    onSuccess: (result) => {\n      if (result.type === 'similar_issues') {\n        // Show similar issues dialog\n        setSimilarIssues(result.data.similarIssues);\n        setPendingIssueData(result.data.submittedIssue);\n        setShowSimilarIssuesDialog(true);\n      } else {\n        // Normal success flow\n        queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n        setIsSubmitted(true);\n        toast({\n          title: \"Issue reported!\",\n          description: \"Thank you for helping improve your community.\",\n        });\n        setTimeout(() => {\n          onSuccess?.();\n        }, 2000);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Report failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Force submit anyway (when user chooses to proceed despite similar issues)\n  const forceSubmitMutation = useMutation({\n    mutationFn: async (issueData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/issues\", {\n        ...issueData,\n        forceSubmit: true // Flag to bypass duplicate detection\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      setIsSubmitted(true);\n      setShowSimilarIssuesDialog(false);\n      toast({\n        title: \"Issue reported!\",\n        description: \"Thank you for helping improve your community.\",\n      });\n      setTimeout(() => {\n        onSuccess?.();\n      }, 2000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Report failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (file: File) => {\n    setImageFile(file);\n    uploadMutation.mutate(file);\n  };\n\n  const handleCameraCapture = async () => {\n    try {\n      await camera.openCamera();\n    } catch (error) {\n      toast({\n        title: \"Camera error\",\n        description: \"Failed to access camera\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Auto-upload when camera captures an image\n  const handleCameraPhotoCapture = async () => {\n    try {\n      await camera.capturePhoto();\n      if (camera.capturedImage) {\n        // Convert captured image to File and upload\n        const response = await fetch(camera.capturedImage);\n        const blob = await response.blob();\n        const file = new File([blob], \"camera-capture.jpg\", { type: \"image/jpeg\" });\n        handleImageUpload(file);\n      }\n    } catch (error) {\n      toast({\n        title: \"Capture failed\",\n        description: \"Failed to capture photo\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGallerySelect = async () => {\n    try {\n      const imageData = await camera.selectFromGallery();\n      // Convert data URL to file\n      const response = await fetch(imageData);\n      const blob = await response.blob();\n      const file = new File([blob], \"upload.jpg\", { type: \"image/jpeg\" });\n      handleImageUpload(file);\n    } catch (error) {\n      toast({\n        title: \"Selection failed\",\n        description: \"Failed to select image\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!geolocation.latitude || !geolocation.longitude) {\n      toast({\n        title: \"Location required\",\n        description: \"Please enable location services to submit a report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const issueData = {\n      ...formData,\n      latitude: geolocation.latitude.toString(),\n      longitude: geolocation.longitude.toString(),\n      imageUrl: uploadedImageUrl || null, // Use the uploaded image reference, not the huge base64 data\n      priority: aiAnalysis?.priority || \"medium\",\n      severityScore: aiAnalysis?.severityScore || 50,\n      aiConfidence: aiAnalysis?.confidence?.toString() || \"0\",\n      departmentRouted: aiAnalysis?.suggestedDepartment || \"public_works\",\n    };\n\n    submitMutation.mutate(issueData);\n  };\n\n  if (isSubmitted) {\n    return (\n      <Card className=\"max-w-md mx-auto\">\n        <CardContent className=\"py-12 text-center\">\n          <CheckCircle className=\"w-16 h-16 mx-auto mb-4 text-secondary\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Report Submitted!</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Your civic issue report has been submitted successfully. \n            You'll receive updates on its progress.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div>• AI has classified your issue</div>\n            <div>• Report routed to appropriate department</div>\n            <div>• You've earned 10 community points</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle>Report a Civic Issue</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Photo Section */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-semibold\">Photo Evidence</Label>\n            \n            {!camera.capturedImage && !imageFile && (\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-24 flex flex-col space-y-2\"\n                  onClick={handleCameraCapture}\n                  data-testid=\"button-camera\"\n                >\n                  <Camera className=\"h-6 w-6\" />\n                  <span>Take Photo</span>\n                </Button>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-24 flex flex-col space-y-2\"\n                  onClick={handleGallerySelect}\n                  data-testid=\"button-gallery\"\n                >\n                  <Upload className=\"h-6 w-6\" />\n                  <span>From Gallery</span>\n                </Button>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"h-24 flex flex-col space-y-2\"\n                  disabled\n                  data-testid=\"button-voice\"\n                >\n                  <Mic className=\"h-6 w-6\" />\n                  <span>Voice Note</span>\n                </Button>\n              </div>\n            )}\n\n            {camera.capturedImage && (\n              <div className=\"relative\">\n                <img\n                  src={camera.capturedImage}\n                  alt=\"Captured issue\"\n                  className=\"w-full max-w-md h-64 object-cover rounded-lg\"\n                  data-testid=\"captured-image\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  className=\"absolute top-2 right-2\"\n                  onClick={() => {\n                    camera.reset();\n                    setImageFile(null);\n                    setAiAnalysis(null);\n                    setUploadedImageUrl(null);\n                  }}\n                  data-testid=\"button-remove-image\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n\n            {camera.isOpen && (\n              <div className=\"space-y-4\">\n                <video\n                  ref={camera.videoRef}\n                  autoPlay\n                  playsInline\n                  className=\"w-full max-w-md h-64 bg-black rounded-lg\"\n                  data-testid=\"camera-video\"\n                />\n                <div className=\"flex space-x-2\">\n                  <Button\n                    type=\"button\"\n                    onClick={camera.capturePhoto}\n                    data-testid=\"button-capture\"\n                  >\n                    📸 Capture & Analyze\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={camera.closeCamera}\n                    data-testid=\"button-cancel-camera\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {uploadMutation.isPending && (\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span>Analyzing image with AI...</span>\n              </div>\n            )}\n          </div>\n\n          {/* AI Analysis Results */}\n          {aiAnalysis && (\n            <Card className=\"bg-primary/5 border-primary/20\">\n              <CardContent className=\"pt-6\">\n                <h3 className=\"font-semibold mb-3 flex items-center\">\n                  <span className=\"mr-2\">🤖</span>\n                  AI Analysis Results\n                </h3>\n                <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <strong>Detected Issue:</strong> {aiAnalysis.category}\n                  </div>\n                  <div>\n                    <strong>Confidence:</strong> {Math.round(aiAnalysis.confidence * 100)}%\n                  </div>\n                  <div>\n                    <strong>Priority:</strong> {aiAnalysis.priority}\n                  </div>\n                  <div>\n                    <strong>Suggested Dept:</strong> {aiAnalysis.suggestedDepartment}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Location Section */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-semibold\">Location</Label>\n            \n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={geolocation.getCurrentPosition}\n              disabled={geolocation.loading}\n              className=\"w-full md:w-auto\"\n              data-testid=\"button-get-location\"\n            >\n              {geolocation.loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Getting location...\n                </>\n              ) : (\n                <>\n                  <MapPin className=\"h-4 w-4 mr-2\" />\n                  {geolocation.latitude ? \"Location captured\" : \"Get current location\"}\n                </>\n              )}\n            </Button>\n\n            {geolocation.error && (\n              <p className=\"text-sm text-destructive\">{geolocation.error}</p>\n            )}\n\n            {geolocation.latitude && geolocation.longitude && (\n              <div className=\"text-sm text-muted-foreground\">\n                📍 {geolocation.latitude.toFixed(6)}, {geolocation.longitude.toFixed(6)}\n                {geolocation.accuracy && ` (±${Math.round(geolocation.accuracy)}m)`}\n              </div>\n            )}\n\n            <div>\n              <Label htmlFor=\"address\">Address (optional)</Label>\n              <Input\n                id=\"address\"\n                placeholder=\"Enter street address or landmark\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                data-testid=\"input-address\"\n              />\n            </div>\n          </div>\n\n          {/* Issue Details */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-semibold\">Issue Details</Label>\n            \n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select issue category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pothole\">Pothole</SelectItem>\n                  <SelectItem value=\"lighting\">Street Lighting</SelectItem>\n                  <SelectItem value=\"garbage\">Garbage/Waste</SelectItem>\n                  <SelectItem value=\"signage\">Damaged Signage</SelectItem>\n                  <SelectItem value=\"graffiti\">Graffiti</SelectItem>\n                  <SelectItem value=\"flooding\">Flooding</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"title\">Issue Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Brief description of the issue\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                required\n                data-testid=\"input-title\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Additional Details (optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Provide more details about the issue...\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                data-testid=\"textarea-description\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex space-x-4\">\n            {onCancel && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                data-testid=\"button-cancel-report\"\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={submitMutation.isPending || !formData.title || !formData.category}\n              data-testid=\"button-submit-report\"\n            >\n              {submitMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Submitting report...\n                </>\n              ) : (\n                \"Submit Report\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":18563},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome to CivicConnect!\",\n        description: `Account created for ${user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"See you next time!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3194},"client/src/hooks/use-camera.tsx":{"content":"import { useState, useRef } from \"react\";\n\ninterface CameraState {\n  isOpen: boolean;\n  capturedImage: string | null;\n  error: string | null;\n  loading: boolean;\n}\n\nexport function useCamera() {\n  const [state, setState] = useState<CameraState>({\n    isOpen: false,\n    capturedImage: null,\n    error: null,\n    loading: false,\n  });\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  const openCamera = async () => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      \n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: \"environment\" },\n        audio: false,\n      });\n      \n      streamRef.current = stream;\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      \n      setState(prev => ({\n        ...prev,\n        isOpen: true,\n        loading: false,\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: \"Failed to access camera. Please check permissions.\",\n        loading: false,\n      }));\n    }\n  };\n\n  const capturePhoto = () => {\n    if (!videoRef.current) return;\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    \n    if (!context) return;\n\n    canvas.width = videoRef.current.videoWidth;\n    canvas.height = videoRef.current.videoHeight;\n    \n    context.drawImage(videoRef.current, 0, 0);\n    \n    const imageData = canvas.toDataURL('image/jpeg', 0.8);\n    \n    setState(prev => ({\n      ...prev,\n      capturedImage: imageData,\n      isOpen: false,\n    }));\n    \n    closeCamera();\n  };\n\n  const closeCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    \n    setState(prev => ({\n      ...prev,\n      isOpen: false,\n    }));\n  };\n\n  const selectFromGallery = (): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      \n      input.onchange = (e) => {\n        const file = (e.target as HTMLInputElement).files?.[0];\n        if (!file) {\n          reject(new Error('No file selected'));\n          return;\n        }\n\n        const reader = new FileReader();\n        reader.onload = () => {\n          const result = reader.result as string;\n          setState(prev => ({ ...prev, capturedImage: result }));\n          resolve(result);\n        };\n        reader.onerror = () => reject(new Error('Failed to read file'));\n        reader.readAsDataURL(file);\n      };\n      \n      input.click();\n    });\n  };\n\n  const reset = () => {\n    setState({\n      isOpen: false,\n      capturedImage: null,\n      error: null,\n      loading: false,\n    });\n  };\n\n  return {\n    ...state,\n    videoRef,\n    openCamera,\n    capturePhoto,\n    closeCamera,\n    selectFromGallery,\n    reset,\n  };\n}\n","size_bytes":2989},"client/src/hooks/use-geolocation.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface GeolocationState {\n  latitude: number | null;\n  longitude: number | null;\n  accuracy: number | null;\n  error: string | null;\n  loading: boolean;\n}\n\nexport function useGeolocation() {\n  const [state, setState] = useState<GeolocationState>({\n    latitude: null,\n    longitude: null,\n    accuracy: null,\n    error: null,\n    loading: false,\n  });\n\n  const getCurrentPosition = () => {\n    if (!navigator.geolocation) {\n      setState(prev => ({\n        ...prev,\n        error: \"Geolocation is not supported by this browser\",\n        loading: false,\n      }));\n      return;\n    }\n\n    setState(prev => ({ ...prev, loading: true, error: null }));\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n          error: null,\n          loading: false,\n        });\n      },\n      (error) => {\n        let errorMessage = \"An unknown error occurred\";\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = \"Location access denied by user\";\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = \"Location information is unavailable\";\n            break;\n          case error.TIMEOUT:\n            errorMessage = \"Location request timed out\";\n            break;\n        }\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          loading: false,\n        }));\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0,\n      }\n    );\n  };\n\n  return {\n    ...state,\n    getCurrentPosition,\n  };\n}\n","size_bytes":1758},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-pwa.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\ninterface PWAState {\n  isInstallable: boolean;\n  isInstalled: boolean;\n  isOnline: boolean;\n  installPrompt: BeforeInstallPromptEvent | null;\n}\n\nexport function usePWA() {\n  const [state, setState] = useState<PWAState>({\n    isInstallable: false,\n    isInstalled: false,\n    isOnline: navigator.onLine,\n    installPrompt: null,\n  });\n\n  useEffect(() => {\n    // Check if app is already installed\n    const isInstalled = \n      window.matchMedia('(display-mode: standalone)').matches ||\n      (window.navigator as any).standalone ||\n      document.referrer.includes('android-app://');\n\n    setState(prev => ({ ...prev, isInstalled }));\n\n    // Listen for install prompt\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      const installEvent = e as BeforeInstallPromptEvent;\n      setState(prev => ({\n        ...prev,\n        isInstallable: true,\n        installPrompt: installEvent,\n      }));\n    };\n\n    // Listen for app installed\n    const handleAppInstalled = () => {\n      setState(prev => ({\n        ...prev,\n        isInstalled: true,\n        isInstallable: false,\n        installPrompt: null,\n      }));\n    };\n\n    // Listen for online/offline status\n    const handleOnline = () => {\n      setState(prev => ({ ...prev, isOnline: true }));\n    };\n\n    const handleOffline = () => {\n      setState(prev => ({ ...prev, isOnline: false }));\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const installApp = async () => {\n    if (!state.installPrompt) return false;\n\n    try {\n      await state.installPrompt.prompt();\n      const choiceResult = await state.installPrompt.userChoice;\n      \n      setState(prev => ({\n        ...prev,\n        isInstallable: false,\n        installPrompt: null,\n      }));\n\n      return choiceResult.outcome === 'accepted';\n    } catch (error) {\n      console.error('PWA install failed:', error);\n      return false;\n    }\n  };\n\n  const registerServiceWorker = async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.register('/sw.js');\n        console.log('Service Worker registered successfully:', registration);\n        \n        // Listen for updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                // New update available\n                if (confirm('A new version is available. Reload to update?')) {\n                  window.location.reload();\n                }\n              }\n            });\n          }\n        });\n\n        return registration;\n      } catch (error) {\n        console.error('Service Worker registration failed:', error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const requestNotificationPermission = async () => {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  };\n\n  const showNotification = (title: string, options?: NotificationOptions) => {\n    if ('serviceWorker' in navigator && Notification.permission === 'granted') {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.showNotification(title, {\n          icon: '/icon-192.png',\n          badge: '/icon-192.png',\n          ...options,\n        });\n      });\n    }\n  };\n\n  return {\n    ...state,\n    installApp,\n    registerServiceWorker,\n    requestNotificationPermission,\n    showNotification,\n  };\n}\n","size_bytes":4434},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useAuth } from \"./use-auth\";\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket() {\n  const { user } = useAuth();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log(\"WebSocket connected\");\n      setIsConnected(true);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error(\"Failed to parse WebSocket message:\", error);\n      }\n    };\n\n    ws.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      setIsConnected(false);\n    };\n\n    ws.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n      setIsConnected(false);\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [user]);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}\n","size_bytes":1592},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":706},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Handle FormData differently for file uploads\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: !isFormData && data ? { \"Content-Type\": \"application/json\" } : {},\n    body: isFormData ? data : data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1518},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { IssueWithReporter, IssueWithDetails } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport {\n  CircleAlert,\n  Wrench,\n  CheckCircle,\n  Clock,\n  TrendingUp,\n  BarChart3,\n  Brain,\n  Users,\n  MapPin,\n  Calendar,\n  Settings,\n  Eye,\n  Edit\n} from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedIssue, setSelectedIssue] = useState<string | null>(null);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [adminNote, setAdminNote] = useState(\"\");\n\n  const { data: issues = [] } = useQuery<IssueWithReporter[]>({\n    queryKey: [\"/api/issues\", { limit: 100 }],\n    enabled: !!user && (user.role === \"admin\" || user.role === \"staff\"),\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: !!user && (user.role === \"admin\" || user.role === \"staff\"),\n  });\n\n  const { data: issueDetails } = useQuery<IssueWithDetails>({\n    queryKey: [\"/api/issues\", selectedIssue],\n    enabled: !!selectedIssue,\n  });\n\n  const updateIssueMutation = useMutation({\n    mutationFn: async ({ issueId, updates }: { issueId: string, updates: any }) => {\n      await apiRequest(\"PATCH\", `/api/issues/${issueId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Issue updated\",\n        description: \"The issue status has been updated successfully.\",\n      });\n      setSelectedIssue(null);\n      setNewStatus(\"\");\n      setAdminNote(\"\");\n    },\n  });\n\n  const addOfficialCommentMutation = useMutation({\n    mutationFn: async ({ issueId, content }: { issueId: string, content: string }) => {\n      await apiRequest(\"POST\", `/api/issues/${issueId}/comments`, { content });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\", selectedIssue] });\n      setAdminNote(\"\");\n      toast({\n        title: \"Official response added\",\n        description: \"Your official response has been posted.\",\n      });\n    },\n  });\n\n  // Filter issues by priority and status for admin view\n  const urgentIssues = issues.filter(i => i.priority === \"urgent\" || i.priority === \"high\");\n  const newIssues = issues.filter(i => i.status === \"submitted\");\n  const inProgressIssues = issues.filter(i => i.status === \"in_progress\" || i.status === \"acknowledged\");\n\n  const handleUpdateIssue = () => {\n    if (!selectedIssue || !newStatus) return;\n    \n    const updates: any = { status: newStatus };\n    if (newStatus === \"resolved\") {\n      updates.resolvedAt = new Date().toISOString();\n    }\n    \n    updateIssueMutation.mutate({ issueId: selectedIssue, updates });\n  };\n\n  const handleAddOfficialComment = () => {\n    if (!selectedIssue || !adminNote.trim()) return;\n    addOfficialCommentMutation.mutate({ issueId: selectedIssue, content: adminNote });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-destructive text-destructive-foreground\";\n      case \"high\": return \"bg-accent text-accent-foreground\";\n      case \"medium\": return \"bg-primary text-primary-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"submitted\": return \"bg-destructive/10 text-destructive border-destructive/20\";\n      case \"acknowledged\": return \"bg-primary/10 text-primary border-primary/20\";\n      case \"in_progress\": return \"bg-accent/10 text-accent border-accent/20\";\n      case \"resolved\": return \"bg-secondary/10 text-secondary border-secondary/20\";\n      default: return \"bg-muted/50 text-muted-foreground border-muted\";\n    }\n  };\n\n  if (!user || (user.role !== \"admin\" && user.role !== \"staff\")) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-6\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <CircleAlert className=\"w-16 h-16 mx-auto mb-4 text-destructive opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Access Denied</h3>\n              <p className=\"text-muted-foreground\">\n                You don't have permission to access the admin dashboard.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold mb-2\">Municipal Dashboard</h1>\n            <p className=\"text-muted-foreground\">\n              Monitor and manage civic issues across the city\n            </p>\n          </div>\n          <Badge variant=\"secondary\" data-testid=\"badge-admin-role\">\n            <Settings className=\"w-3 h-3 mr-1\" />\n            {user.role === \"admin\" ? \"Administrator\" : \"Staff Member\"}\n          </Badge>\n        </div>\n\n        {/* Stats Overview */}\n        {stats && (\n          <div className=\"grid md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Active Reports</p>\n                    <p className=\"text-2xl font-bold text-destructive\" data-testid=\"stat-active-reports\">\n                      {stats.active}\n                    </p>\n                  </div>\n                  <CircleAlert className=\"text-destructive text-xl\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                    <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-in-progress\">\n                      {stats.inProgress}\n                    </p>\n                  </div>\n                  <Wrench className=\"text-accent text-xl\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Resolved</p>\n                    <p className=\"text-2xl font-bold text-secondary\" data-testid=\"stat-resolved\">\n                      {stats.resolved}\n                    </p>\n                  </div>\n                  <CheckCircle className=\"text-secondary text-xl\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Avg Response</p>\n                    <p className=\"text-2xl font-bold text-primary\" data-testid=\"stat-avg-response\">\n                      {stats.avgResponseTime} days\n                    </p>\n                  </div>\n                  <Clock className=\"text-primary text-xl\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* AI Insights Panel */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Brain className=\"w-5 h-5 mr-2 text-primary\" />\n              AI Predictive Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-gradient-to-r from-primary/5 to-secondary/5 rounded-lg p-4 border border-primary/20\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"bg-white/50 rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Pothole Trend Alert</span>\n                    <TrendingUp className=\"text-destructive w-4 h-4\" />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Oak Street showing 40% increase in reports. Recommend preventive maintenance.\n                  </p>\n                </div>\n                \n                <div className=\"bg-white/50 rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Resource Optimization</span>\n                    <BarChart3 className=\"text-secondary w-4 h-4\" />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Deploy crew to Downtown district - predicted 20% efficiency gain.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Action Sections */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-6\">\n          {/* Urgent Issues */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-destructive\">\n                Urgent Issues ({urgentIssues.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {urgentIssues.slice(0, 3).map((issue) => (\n                <div \n                  key={issue.id} \n                  className=\"p-3 border border-destructive/20 rounded-lg bg-destructive/5\"\n                  data-testid={`urgent-issue-${issue.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-sm\">{issue.title}</h4>\n                    <Badge className={getPriorityColor(issue.priority)}>\n                      {issue.priority}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-2\">\n                    {issue.address || `${parseFloat(issue.latitude).toFixed(4)}, ${parseFloat(issue.longitude).toFixed(4)}`}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(issue.createdAt))} ago\n                    </span>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => setSelectedIssue(issue.id)}\n                          data-testid={`button-view-urgent-${issue.id}`}\n                        >\n                          <Eye className=\"w-3 h-3 mr-1\" />\n                          Review\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n                        <AdminIssueDialog\n                          issue={issueDetails}\n                          newStatus={newStatus}\n                          setNewStatus={setNewStatus}\n                          adminNote={adminNote}\n                          setAdminNote={setAdminNote}\n                          onUpdateIssue={handleUpdateIssue}\n                          onAddComment={handleAddOfficialComment}\n                          updateMutation={updateIssueMutation}\n                          commentMutation={addOfficialCommentMutation}\n                        />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* New Issues */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-primary\">\n                New Issues ({newIssues.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {newIssues.slice(0, 3).map((issue) => (\n                <div \n                  key={issue.id} \n                  className=\"p-3 border border-primary/20 rounded-lg bg-primary/5\"\n                  data-testid={`new-issue-${issue.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-sm\">{issue.title}</h4>\n                    <Badge className={getStatusColor(issue.status)}>\n                      New\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-2\">\n                    By {issue.reporter.username}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(issue.createdAt))} ago\n                    </span>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setSelectedIssue(issue.id)}\n                          data-testid={`button-review-new-${issue.id}`}\n                        >\n                          <Edit className=\"w-3 h-3 mr-1\" />\n                          Process\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n                        <AdminIssueDialog\n                          issue={issueDetails}\n                          newStatus={newStatus}\n                          setNewStatus={setNewStatus}\n                          adminNote={adminNote}\n                          setAdminNote={setAdminNote}\n                          onUpdateIssue={handleUpdateIssue}\n                          onAddComment={handleAddOfficialComment}\n                          updateMutation={updateIssueMutation}\n                          commentMutation={addOfficialCommentMutation}\n                        />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* In Progress */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-accent\">\n                In Progress ({inProgressIssues.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {inProgressIssues.slice(0, 3).map((issue) => (\n                <div \n                  key={issue.id} \n                  className=\"p-3 border border-accent/20 rounded-lg bg-accent/5\"\n                  data-testid={`progress-issue-${issue.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-sm\">{issue.title}</h4>\n                    <Badge className={getStatusColor(issue.status)}>\n                      {issue.status === \"in_progress\" ? \"In Progress\" : \"Acknowledged\"}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-2\">\n                    Dept: {issue.departmentRouted || \"Unassigned\"}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      Updated {formatDistanceToNow(new Date(issue.updatedAt))} ago\n                    </span>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setSelectedIssue(issue.id)}\n                          data-testid={`button-update-progress-${issue.id}`}\n                        >\n                          <Settings className=\"w-3 h-3 mr-1\" />\n                          Update\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n                        <AdminIssueDialog\n                          issue={issueDetails}\n                          newStatus={newStatus}\n                          setNewStatus={setNewStatus}\n                          adminNote={adminNote}\n                          setAdminNote={setAdminNote}\n                          onUpdateIssue={handleUpdateIssue}\n                          onAddComment={handleAddOfficialComment}\n                          updateMutation={updateIssueMutation}\n                          commentMutation={addOfficialCommentMutation}\n                        />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* All Issues Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Issues</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {issues.map((issue) => (\n                <div \n                  key={issue.id} \n                  className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n                  data-testid={`issue-row-${issue.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    {issue.imageUrl && (\n                      <img \n                        src={issue.imageUrl} \n                        alt={issue.title}\n                        className=\"w-12 h-12 object-cover rounded\"\n                      />\n                    )}\n                    <div>\n                      <h4 className=\"font-medium\">{issue.title}</h4>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <Users className=\"w-3 h-3\" />\n                        <span>{issue.reporter.username}</span>\n                        <MapPin className=\"w-3 h-3 ml-2\" />\n                        <span>{issue.category}</span>\n                        <Calendar className=\"w-3 h-3 ml-2\" />\n                        <span>{formatDistanceToNow(new Date(issue.createdAt))} ago</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={getPriorityColor(issue.priority)}>\n                      {issue.priority}\n                    </Badge>\n                    <Badge className={getStatusColor(issue.status)}>\n                      {issue.status.replace('_', ' ')}\n                    </Badge>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setSelectedIssue(issue.id)}\n                          data-testid={`button-manage-${issue.id}`}\n                        >\n                          Manage\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n                        <AdminIssueDialog\n                          issue={issueDetails}\n                          newStatus={newStatus}\n                          setNewStatus={setNewStatus}\n                          adminNote={adminNote}\n                          setAdminNote={setAdminNote}\n                          onUpdateIssue={handleUpdateIssue}\n                          onAddComment={handleAddOfficialComment}\n                          updateMutation={updateIssueMutation}\n                          commentMutation={addOfficialCommentMutation}\n                        />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Admin Issue Dialog Component\nfunction AdminIssueDialog({ \n  issue, \n  newStatus, \n  setNewStatus, \n  adminNote, \n  setAdminNote, \n  onUpdateIssue, \n  onAddComment,\n  updateMutation,\n  commentMutation\n}: {\n  issue: IssueWithDetails | undefined;\n  newStatus: string;\n  setNewStatus: (status: string) => void;\n  adminNote: string;\n  setAdminNote: (note: string) => void;\n  onUpdateIssue: () => void;\n  onAddComment: () => void;\n  updateMutation: any;\n  commentMutation: any;\n}) {\n  if (!issue) return <div>Loading...</div>;\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>{issue.title}</DialogTitle>\n      </DialogHeader>\n      \n      <div className=\"space-y-6\">\n        {/* Issue Image */}\n        {issue.imageUrl && (\n          <div>\n            <img \n              src={issue.imageUrl} \n              alt={issue.title}\n              className=\"w-full h-64 object-cover rounded-lg\"\n            />\n          </div>\n        )}\n\n        {/* Issue Details Grid */}\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-semibold mb-3\">Issue Information</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div><strong>Reporter:</strong> {issue.reporter.username}</div>\n              <div><strong>Category:</strong> {issue.category}</div>\n              <div><strong>Priority:</strong> {issue.priority}</div>\n              <div><strong>Current Status:</strong> {issue.status}</div>\n              <div><strong>Department:</strong> {issue.departmentRouted || \"Unassigned\"}</div>\n              {issue.address && <div><strong>Address:</strong> {issue.address}</div>}\n              <div><strong>Created:</strong> {formatDistanceToNow(new Date(issue.createdAt))} ago</div>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-3\">AI Analysis</h4>\n            <div className=\"space-y-2 text-sm\">\n              {issue.aiConfidence && (\n                <div><strong>AI Confidence:</strong> {Math.round(parseFloat(issue.aiConfidence) * 100)}%</div>\n              )}\n              {issue.severityScore && (\n                <div><strong>Severity Score:</strong> {issue.severityScore}/100</div>\n              )}\n              <div><strong>Validations:</strong> {issue.validationCount}</div>\n              <div><strong>Comments:</strong> {issue.commentCount}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Description */}\n        {issue.description && (\n          <div>\n            <h4 className=\"font-semibold mb-2\">Description</h4>\n            <p className=\"text-sm text-muted-foreground bg-muted/30 p-3 rounded-lg\">\n              {issue.description}\n            </p>\n          </div>\n        )}\n\n        {/* Status Update Section */}\n        <div className=\"bg-primary/5 p-4 rounded-lg border border-primary/20\">\n          <h4 className=\"font-semibold mb-3\">Update Status</h4>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <Select value={newStatus} onValueChange={setNewStatus}>\n              <SelectTrigger data-testid=\"select-new-status\">\n                <SelectValue placeholder=\"Select new status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"acknowledged\">Acknowledged</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"resolved\">Resolved</SelectItem>\n                <SelectItem value=\"closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Button \n              onClick={onUpdateIssue}\n              disabled={!newStatus || updateMutation.isPending}\n              data-testid=\"button-update-status\"\n            >\n              Update Status\n            </Button>\n          </div>\n        </div>\n\n        {/* Official Response Section */}\n        <div className=\"bg-secondary/5 p-4 rounded-lg border border-secondary/20\">\n          <h4 className=\"font-semibold mb-3\">Add Official Response</h4>\n          <div className=\"space-y-3\">\n            <Textarea\n              placeholder=\"Write an official response to the citizen...\"\n              value={adminNote}\n              onChange={(e) => setAdminNote(e.target.value)}\n              data-testid=\"textarea-admin-note\"\n            />\n            <Button \n              onClick={onAddComment}\n              disabled={!adminNote.trim() || commentMutation.isPending}\n              data-testid=\"button-add-official-response\"\n            >\n              Add Official Response\n            </Button>\n          </div>\n        </div>\n\n        {/* Comments History */}\n        <div>\n          <h4 className=\"font-semibold mb-4\">Comments & Updates ({issue.comments.length})</h4>\n          <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n            {issue.comments.map((comment) => (\n              <div \n                key={comment.id} \n                className={`p-3 rounded-lg ${\n                  comment.isOfficial \n                    ? 'bg-primary/5 border border-primary/20' \n                    : 'bg-muted/30'\n                }`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-sm\">\n                    {comment.user.username}\n                    {comment.isOfficial && (\n                      <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Official</Badge>\n                    )}\n                  </span>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(comment.createdAt))} ago\n                  </span>\n                </div>\n                <p className=\"text-sm\">{comment.content}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":27264},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, MapPin, Camera, Users } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerForm);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8 min-h-screen\">\n          {/* Hero Section */}\n          <div className=\"flex flex-col justify-center space-y-8\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center\">\n                  <MapPin className=\"text-primary-foreground text-2xl\" />\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground\">CivicConnect</h1>\n                  <p className=\"text-muted-foreground\">Smart Civic Reporting Platform</p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h2 className=\"text-4xl font-bold leading-tight\">\n                  Help improve your community with \n                  <span className=\"text-primary\"> AI-powered</span> civic reporting\n                </h2>\n                <p className=\"text-xl text-muted-foreground\">\n                  Report issues, track progress, and collaborate with your neighbors to make your city better.\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div className=\"bg-card border border-border rounded-xl p-6 space-y-3\">\n                  <Camera className=\"w-8 h-8 text-primary\" />\n                  <h3 className=\"font-semibold\">AI Detection</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Take a photo and let AI automatically classify and prioritize the issue\n                  </p>\n                </div>\n                \n                <div className=\"bg-card border border-border rounded-xl p-6 space-y-3\">\n                  <MapPin className=\"w-8 h-8 text-secondary\" />\n                  <h3 className=\"font-semibold\">Smart Routing</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Reports are automatically routed to the right department for faster resolution\n                  </p>\n                </div>\n                \n                <div className=\"bg-card border border-border rounded-xl p-6 space-y-3\">\n                  <Users className=\"w-8 h-8 text-accent\" />\n                  <h3 className=\"font-semibold\">Community Power</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Earn points, validate reports, and track your impact on the community\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Auth Forms */}\n          <div className=\"flex items-center justify-center\">\n            <Card className=\"w-full max-w-md\">\n              <CardHeader className=\"text-center\">\n                <CardTitle>Join CivicConnect</CardTitle>\n                <CardDescription>\n                  Create an account or sign in to start reporting issues\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"login\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n                    <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"login\" className=\"space-y-4\">\n                    <form onSubmit={handleLogin} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"login-username\">Username</Label>\n                        <Input\n                          id=\"login-username\"\n                          data-testid=\"input-login-username\"\n                          type=\"text\"\n                          placeholder=\"Enter your username\"\n                          value={loginForm.username}\n                          onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"login-password\">Password</Label>\n                        <Input\n                          id=\"login-password\"\n                          data-testid=\"input-login-password\"\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          value={loginForm.password}\n                          onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        data-testid=\"button-login\"\n                        disabled={loginMutation.isPending}\n                      >\n                        {loginMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                            Signing in...\n                          </>\n                        ) : (\n                          \"Sign In\"\n                        )}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"register\" className=\"space-y-4\">\n                    <form onSubmit={handleRegister} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-firstname\">First Name</Label>\n                          <Input\n                            id=\"register-firstname\"\n                            data-testid=\"input-register-firstname\"\n                            type=\"text\"\n                            placeholder=\"First name\"\n                            value={registerForm.firstName}\n                            onChange={(e) => setRegisterForm({ ...registerForm, firstName: e.target.value })}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-lastname\">Last Name</Label>\n                          <Input\n                            id=\"register-lastname\"\n                            data-testid=\"input-register-lastname\"\n                            type=\"text\"\n                            placeholder=\"Last name\"\n                            value={registerForm.lastName}\n                            onChange={(e) => setRegisterForm({ ...registerForm, lastName: e.target.value })}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-username\">Username</Label>\n                        <Input\n                          id=\"register-username\"\n                          data-testid=\"input-register-username\"\n                          type=\"text\"\n                          placeholder=\"Choose a username\"\n                          value={registerForm.username}\n                          onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-email\">Email</Label>\n                        <Input\n                          id=\"register-email\"\n                          data-testid=\"input-register-email\"\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          value={registerForm.email}\n                          onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-password\">Password</Label>\n                        <Input\n                          id=\"register-password\"\n                          data-testid=\"input-register-password\"\n                          type=\"password\"\n                          placeholder=\"Create a password\"\n                          value={registerForm.password}\n                          onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        data-testid=\"button-register\"\n                        disabled={registerMutation.isPending}\n                      >\n                        {registerMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                            Creating account...\n                          </>\n                        ) : (\n                          \"Create Account\"\n                        )}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10819},"client/src/pages/home-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { BottomNav } from \"@/components/bottom-nav\";\nimport { ReportCard } from \"@/components/report-card\";\nimport { AIAnalysis } from \"@/components/ai-analysis\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Camera, \n  MapPin, \n  Mic, \n  Trophy, \n  Medal, \n  Flame, \n  Shield, \n  Star,\n  TrendingUp,\n  BarChart3,\n  CircleAlert,\n  Wrench,\n  CheckCircle,\n  Clock,\n  Brain,\n  Smartphone,\n  Wifi,\n  Bell\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { IssueWithReporter, User, Achievement } from \"@shared/schema\";\nimport { useTranslation } from 'react-i18next';\n\nexport default function HomePage() {\n  const { user } = useAuth();\n  const { t } = useTranslation();\n\n  const { data: recentIssues = [] } = useQuery<IssueWithReporter[]>({\n    queryKey: [\"/api/issues\"],\n    enabled: !!user,\n  });\n\n  const { data: leaderboard = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users/leaderboard\"],\n    enabled: !!user,\n  });\n\n  const { data: stats } = useQuery<{\n    active: number;\n    inProgress: number;\n    resolved: number;\n    avgResponseTime: number;\n  }>({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: !!user && (user.role === \"admin\" || user.role === \"staff\"),\n  });\n\n  const { data: achievements = [] } = useQuery<Achievement[]>({\n    queryKey: [\"/api/users\", user?.id, \"achievements\"],\n    enabled: !!user,\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-6 space-y-8 pb-20 md:pb-6\">\n        {/* Quick Report Hero */}\n        <div className=\"bg-gradient-to-br from-primary to-secondary rounded-2xl p-6 text-white relative overflow-hidden\">\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">{t('reportIssueTitle')}</h2>\n                <p className=\"text-primary-foreground/80\">{t('reportIssueSubtitle')}</p>\n              </div>\n              <div className=\"w-16 h-16 bg-white/10 rounded-full flex items-center justify-center\">\n                <Camera className=\"text-2xl\" />\n              </div>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-4 mt-6\">\n              <Link href=\"/report\">\n                <Button variant=\"ghost\" className=\"bg-white/10 backdrop-blur-sm hover:bg-white/20 rounded-xl p-4 h-auto text-center transition-all transform hover:scale-105 w-full\" data-testid=\"button-take-photo\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Camera className=\"text-2xl\" />\n                    <div className=\"font-medium\">{t('takePhoto')}</div>\n                    <div className=\"text-xs opacity-80\">{t('aiDetectType')}</div>\n                  </div>\n                </Button>\n              </Link>\n              <Link href=\"/report\">\n                <Button variant=\"ghost\" className=\"bg-white/10 backdrop-blur-sm hover:bg-white/20 rounded-xl p-4 h-auto text-center transition-all transform hover:scale-105 w-full\" data-testid=\"button-gps-location\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <MapPin className=\"text-2xl\" />\n                    <div className=\"font-medium\">{t('gpsLocation')}</div>\n                    <div className=\"text-xs opacity-80\">{t('autoTagged')}</div>\n                  </div>\n                </Button>\n              </Link>\n              <Link href=\"/report\">\n                <Button variant=\"ghost\" className=\"bg-white/10 backdrop-blur-sm hover:bg-white/20 rounded-xl p-4 h-auto text-center transition-all transform hover:scale-105 w-full\" data-testid=\"button-voice-input\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Mic className=\"text-2xl\" />\n                    <div className=\"font-medium\">{t('voiceInput')}</div>\n                    <div className=\"text-xs opacity-80\">{t('speechToText')}</div>\n                  </div>\n                </Button>\n              </Link>\n            </div>\n          </div>\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -translate-y-16 translate-x-16\"></div>\n        </div>\n\n        {/* AI Processing Demo */}\n        <AIAnalysis />\n\n        {/* Community Features & Gamification */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Leaderboard */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold\">{t('communityLeaders')}</CardTitle>\n                <Trophy className=\"text-accent\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {leaderboard.slice(0, 3).map((leader, index) => (\n                  <div \n                    key={leader.id} \n                    className={`flex items-center justify-between p-3 rounded-lg border ${\n                      index === 0 ? 'bg-accent/5 border-accent/20' : 'bg-muted/50'\n                    }`}\n                    data-testid={`leaderboard-item-${index + 1}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${\n                        index === 0 ? 'bg-accent' : 'bg-muted-foreground'\n                      }`}>\n                        {index + 1}\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{leader.username}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {index === 0 ? 'Civic Champion' : index === 1 ? 'Issue Detective' : 'Community Helper'}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`font-semibold ${index === 0 ? 'text-accent' : ''}`}>\n                        {leader.points.toLocaleString()} pts\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">reports</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Achievements */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold\">Your Achievements</CardTitle>\n                <Medal className=\"text-secondary\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"text-center p-3 bg-secondary/10 rounded-lg border-2 border-secondary/20\" data-testid=\"achievement-first-reporter\">\n                  <Camera className=\"text-2xl text-secondary mb-1 mx-auto\" />\n                  <div className=\"text-xs font-medium\">First Reporter</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {achievements.some((a: Achievement) => a.type === 'first_reporter') ? 'Unlocked' : 'Locked'}\n                  </div>\n                </div>\n                \n                <div className=\"text-center p-3 bg-accent/10 rounded-lg border-2 border-accent/20\" data-testid=\"achievement-hot-streak\">\n                  <Flame className=\"text-2xl text-accent mb-1 mx-auto\" />\n                  <div className=\"text-xs font-medium\">Hot Streak</div>\n                  <div className=\"text-xs text-muted-foreground\">5 days</div>\n                </div>\n                \n                <div className=\"text-center p-3 bg-primary/10 rounded-lg border-2 border-primary/20\" data-testid=\"achievement-quality-guard\">\n                  <Shield className=\"text-2xl text-primary mb-1 mx-auto\" />\n                  <div className=\"text-xs font-medium\">Quality Guard</div>\n                  <div className=\"text-xs text-muted-foreground\">95% accurate</div>\n                </div>\n                \n                <div className=\"text-center p-3 bg-muted/50 rounded-lg border-2 border-dashed border-muted-foreground/30\" data-testid=\"achievement-city-hero\">\n                  <Star className=\"text-2xl text-muted-foreground mb-1 mx-auto\" />\n                  <div className=\"text-xs font-medium\">City Hero</div>\n                  <div className=\"text-xs text-muted-foreground\">0/50 reports</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Reports */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold\">Recent Reports</CardTitle>\n              <Link href=\"/my-reports\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"link-view-all-reports\">View All</Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentIssues.slice(0, 3).map((issue) => (\n                <ReportCard key={issue.id} issue={issue} />\n              ))}\n              {recentIssues.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Camera className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No reports yet. Be the first to report an issue!</p>\n                  <Link href=\"/report\">\n                    <Button className=\"mt-4\" data-testid=\"button-create-first-report\">Create Your First Report</Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admin Dashboard Preview */}\n        {user && (user.role === \"admin\" || user.role === \"staff\") && stats && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold\">Municipal Dashboard</CardTitle>\n                <Badge variant=\"secondary\" data-testid=\"badge-admin-view\">\n                  <Shield className=\"w-3 h-3 mr-1\" />\n                  Admin View\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {/* Stats Overview */}\n              <div className=\"grid md:grid-cols-4 gap-4 mb-6\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Active Reports</p>\n                        <p className=\"text-2xl font-bold text-destructive\" data-testid=\"stat-active-reports\">{stats?.active || 0}</p>\n                      </div>\n                      <CircleAlert className=\"text-destructive text-xl\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                        <p className=\"text-2xl font-bold text-accent\" data-testid=\"stat-in-progress\">{stats?.inProgress || 0}</p>\n                      </div>\n                      <Wrench className=\"text-accent text-xl\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Resolved</p>\n                        <p className=\"text-2xl font-bold text-secondary\" data-testid=\"stat-resolved\">{stats?.resolved || 0}</p>\n                      </div>\n                      <CheckCircle className=\"text-secondary text-xl\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Avg Response</p>\n                        <p className=\"text-2xl font-bold text-primary\" data-testid=\"stat-avg-response\">{stats?.avgResponseTime || 0} days</p>\n                      </div>\n                      <Clock className=\"text-primary text-xl\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              {/* AI Insights */}\n              <div className=\"bg-gradient-to-r from-primary/5 to-secondary/5 rounded-lg p-4 border border-primary/20\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <Brain className=\"text-primary text-xl\" />\n                  <h4 className=\"font-semibold\">AI Predictive Insights</h4>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"bg-white/50 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium\">Pothole Trend Alert</span>\n                      <TrendingUp className=\"text-destructive w-4 h-4\" />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Oak Street showing 40% increase in reports. Recommend preventive maintenance.</p>\n                  </div>\n                  \n                  <div className=\"bg-white/50 rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium\">Resource Optimization</span>\n                      <BarChart3 className=\"text-secondary w-4 h-4\" />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Deploy crew to Downtown district - predicted 20% efficiency gain.</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-4\">\n                <Link href=\"/admin\">\n                  <Button className=\"w-full\" data-testid=\"button-full-dashboard\">View Full Dashboard</Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* PWA Features */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid md:grid-cols-3 gap-6 text-center\">\n              <div data-testid=\"pwa-feature-install\">\n                <Smartphone className=\"w-8 h-8 text-primary mb-3 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Install as App</h4>\n                <p className=\"text-sm text-muted-foreground\">Add to home screen for instant access</p>\n              </div>\n              \n              <div data-testid=\"pwa-feature-offline\">\n                <Wifi className=\"w-8 h-8 text-secondary mb-3 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Works Offline</h4>\n                <p className=\"text-sm text-muted-foreground\">Create draft reports without internet</p>\n              </div>\n              \n              <div data-testid=\"pwa-feature-notifications\">\n                <Bell className=\"w-8 h-8 text-accent mb-3 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Push Notifications</h4>\n                <p className=\"text-sm text-muted-foreground\">Get updates on your reports</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":16267},"client/src/pages/map-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { BottomNav } from \"@/components/bottom-nav\";\nimport { IssueMap } from \"@/components/issue-map\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { IssueWithReporter } from \"@shared/schema\";\nimport { MapPin, Search, Filter, Target } from \"lucide-react\";\n\nexport default function MapPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState<[number, number] | null>(null);\n  \n  const geolocation = useGeolocation();\n\n  const { data: issues = [] } = useQuery<IssueWithReporter[]>({\n    queryKey: [\"/api/issues\", { \n      category: selectedCategory === \"all\" ? undefined : selectedCategory,\n      status: selectedStatus === \"all\" ? undefined : selectedStatus,\n      limit: 1000\n    }],\n  });\n\n  const { data: nearbyIssues = [] } = useQuery<IssueWithReporter[]>({\n    queryKey: [\"/api/issues/near\", geolocation.latitude, geolocation.longitude],\n    enabled: !!geolocation.latitude && !!geolocation.longitude,\n  });\n\n  const filteredIssues = issues.filter(issue => {\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      return issue.title.toLowerCase().includes(query) ||\n             issue.description?.toLowerCase().includes(query) ||\n             issue.address?.toLowerCase().includes(query);\n    }\n    return true;\n  });\n\n  const handleCenterOnUser = () => {\n    geolocation.getCurrentPosition();\n    if (geolocation.latitude && geolocation.longitude) {\n      setMapCenter([geolocation.latitude, geolocation.longitude]);\n    }\n  };\n\n  const categoryStats = {\n    pothole: filteredIssues.filter(i => i.category === 'pothole').length,\n    lighting: filteredIssues.filter(i => i.category === 'lighting').length,\n    garbage: filteredIssues.filter(i => i.category === 'garbage').length,\n    signage: filteredIssues.filter(i => i.category === 'signage').length,\n  };\n\n  const statusStats = {\n    submitted: filteredIssues.filter(i => i.status === 'submitted').length,\n    acknowledged: filteredIssues.filter(i => i.status === 'acknowledged').length,\n    in_progress: filteredIssues.filter(i => i.status === 'in_progress').length,\n    resolved: filteredIssues.filter(i => i.status === 'resolved').length,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-6 pb-20 md:pb-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold mb-2\">Community Issue Map</h1>\n            <p className=\"text-muted-foreground\">\n              {filteredIssues.length} issues found in your area\n            </p>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={handleCenterOnUser}\n            disabled={geolocation.loading}\n            data-testid=\"button-center-on-user\"\n          >\n            <Target className=\"w-4 h-4 mr-2\" />\n            My Location\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Filters & Search</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search issues...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-issues\"\n                />\n              </div>\n              \n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category-filter\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"pothole\">Potholes ({categoryStats.pothole})</SelectItem>\n                  <SelectItem value=\"lighting\">Lighting ({categoryStats.lighting})</SelectItem>\n                  <SelectItem value=\"garbage\">Garbage ({categoryStats.garbage})</SelectItem>\n                  <SelectItem value=\"signage\">Signage ({categoryStats.signage})</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"submitted\">Submitted ({statusStats.submitted})</SelectItem>\n                  <SelectItem value=\"acknowledged\">Acknowledged ({statusStats.acknowledged})</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress ({statusStats.in_progress})</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved ({statusStats.resolved})</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  {filteredIssues.length} of {issues.length}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Status Legend */}\n        <div className=\"flex flex-wrap gap-2 mb-6\">\n          <Badge variant=\"destructive\" data-testid=\"legend-submitted\">\n            🔴 Submitted ({statusStats.submitted})\n          </Badge>\n          <Badge variant=\"secondary\" data-testid=\"legend-acknowledged\">\n            🟡 Acknowledged ({statusStats.acknowledged})\n          </Badge>\n          <Badge className=\"bg-accent text-accent-foreground\" data-testid=\"legend-in-progress\">\n            🟠 In Progress ({statusStats.in_progress})\n          </Badge>\n          <Badge className=\"bg-secondary text-secondary-foreground\" data-testid=\"legend-resolved\">\n            🟢 Resolved ({statusStats.resolved})\n          </Badge>\n        </div>\n\n        {/* Map */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-0\">\n            <IssueMap \n              issues={filteredIssues}\n              center={mapCenter}\n              userLocation={\n                geolocation.latitude && geolocation.longitude\n                  ? [geolocation.latitude, geolocation.longitude]\n                  : undefined\n              }\n            />\n          </CardContent>\n        </Card>\n\n        {/* Quick Stats */}\n        <div className=\"grid md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-destructive mb-1\">\n                {statusStats.submitted}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">New Reports</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-accent mb-1\">\n                {statusStats.in_progress}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">In Progress</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-secondary mb-1\">\n                {statusStats.resolved}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Resolved</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">\n                {Math.round((statusStats.resolved / Math.max(issues.length, 1)) * 100)}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Resolution Rate</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":8988},"client/src/pages/my-reports-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { BottomNav } from \"@/components/bottom-nav\";\nimport { ReportCard } from \"@/components/report-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { IssueWithReporter, IssueWithDetails } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { \n  Camera, \n  Plus, \n  Filter, \n  MessageCircle, \n  ThumbsUp, \n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Wrench\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function MyReportsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedIssue, setSelectedIssue] = useState<string | null>(null);\n  const [newComment, setNewComment] = useState(\"\");\n\n  const { data: myIssues = [], isLoading } = useQuery<IssueWithReporter[]>({\n    queryKey: [\"/api/issues\", { reporterId: user?.id }],\n    enabled: !!user,\n  });\n\n  const { data: issueDetails } = useQuery<IssueWithDetails>({\n    queryKey: [\"/api/issues\", selectedIssue],\n    enabled: !!selectedIssue,\n  });\n\n  const { data: achievements = [] } = useQuery({\n    queryKey: [\"/api/users\", user?.id, \"achievements\"],\n    enabled: !!user,\n  });\n\n  const validateMutation = useMutation({\n    mutationFn: async ({ issueId, isValid }: { issueId: string, isValid: boolean }) => {\n      await apiRequest(\"POST\", `/api/issues/${issueId}/validate`, { isValid });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      toast({\n        title: \"Validation recorded\",\n        description: \"Thank you for helping verify this report!\",\n      });\n    },\n  });\n\n  const commentMutation = useMutation({\n    mutationFn: async ({ issueId, content }: { issueId: string, content: string }) => {\n      await apiRequest(\"POST\", `/api/issues/${issueId}/comments`, { content });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\", selectedIssue] });\n      setNewComment(\"\");\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted successfully.\",\n      });\n    },\n  });\n\n  const filteredIssues = myIssues.filter(issue => {\n    if (statusFilter === \"all\") return true;\n    return issue.status === statusFilter;\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"submitted\": return <Clock className=\"w-4 h-4 text-muted-foreground\" />;\n      case \"acknowledged\": return <AlertCircle className=\"w-4 h-4 text-primary\" />;\n      case \"in_progress\": return <Wrench className=\"w-4 h-4 text-accent\" />;\n      case \"resolved\": return <CheckCircle className=\"w-4 h-4 text-secondary\" />;\n      default: return <Clock className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const handleAddComment = () => {\n    if (!selectedIssue || !newComment.trim()) return;\n    commentMutation.mutate({ issueId: selectedIssue, content: newComment });\n  };\n\n  const statsData = {\n    total: myIssues.length,\n    submitted: myIssues.filter(i => i.status === 'submitted').length,\n    in_progress: myIssues.filter(i => i.status === 'in_progress').length,\n    resolved: myIssues.filter(i => i.status === 'resolved').length,\n    totalValidations: myIssues.reduce((sum, issue) => sum + issue.validationCount, 0),\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </div>\n        <BottomNav />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-6 pb-20 md:pb-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold mb-2\">My Reports</h1>\n            <p className=\"text-muted-foreground\">\n              Track the progress of your civic issue reports\n            </p>\n          </div>\n          <Link href=\"/report\">\n            <Button data-testid=\"button-new-report\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Report\n            </Button>\n          </Link>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"stat-total-reports\">\n                {statsData.total}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Reports</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-accent mb-1\" data-testid=\"stat-in-progress\">\n                {statsData.in_progress}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">In Progress</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"stat-resolved\">\n                {statsData.resolved}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Resolved</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary mb-1\" data-testid=\"stat-validations\">\n                {statsData.totalValidations}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Community Verifications</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Achievements Preview */}\n        {achievements.length > 0 && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Achievements</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {achievements.slice(0, 3).map((achievement) => (\n                  <Badge \n                    key={achievement.id} \n                    className=\"bg-accent/10 text-accent border-accent/20\"\n                    data-testid={`achievement-${achievement.type}`}\n                  >\n                    <span className=\"mr-1\">🏆</span>\n                    {achievement.title}\n                  </Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Filter by status:</span>\n              </div>\n              \n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status ({statsData.total})</SelectItem>\n                  <SelectItem value=\"submitted\">Submitted ({statsData.submitted})</SelectItem>\n                  <SelectItem value=\"acknowledged\">Acknowledged</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress ({statsData.in_progress})</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved ({statsData.resolved})</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reports List */}\n        <div className=\"space-y-4\">\n          {filteredIssues.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <Camera className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No reports found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {statusFilter === \"all\" \n                    ? \"You haven't submitted any reports yet. Start making a difference in your community!\"\n                    : `No reports with status \"${statusFilter}\".`\n                  }\n                </p>\n                <Link href=\"/report\">\n                  <Button data-testid=\"button-create-first-report\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Report\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredIssues.map((issue) => (\n              <div key={issue.id}>\n                <ReportCard issue={issue} />\n                \n                {/* Additional Actions */}\n                <Card className=\"mt-2 border-l-4 border-l-primary/20\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getStatusIcon(issue.status)}\n                          <span className=\"text-sm font-medium capitalize\">\n                            {issue.status.replace('_', ' ')}\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Updated {formatDistanceToNow(new Date(issue.updatedAt))} ago\n                        </div>\n                      </div>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedIssue(issue.id)}\n                            data-testid={`button-view-details-${issue.id}`}\n                          >\n                            View Details\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>{issue.title}</DialogTitle>\n                          </DialogHeader>\n                          \n                          {issueDetails && (\n                            <div className=\"space-y-4\">\n                              {/* Issue Image */}\n                              {issue.imageUrl && (\n                                <div>\n                                  <img \n                                    src={issue.imageUrl} \n                                    alt={issue.title}\n                                    className=\"w-full h-64 object-cover rounded-lg\"\n                                  />\n                                </div>\n                              )}\n\n                              {/* Issue Details */}\n                              <div className=\"grid md:grid-cols-2 gap-4\">\n                                <div>\n                                  <h4 className=\"font-semibold mb-2\">Details</h4>\n                                  <div className=\"space-y-2 text-sm\">\n                                    <div><strong>Category:</strong> {issue.category}</div>\n                                    <div><strong>Priority:</strong> {issue.priority}</div>\n                                    <div><strong>Status:</strong> {issue.status}</div>\n                                    {issue.address && <div><strong>Address:</strong> {issue.address}</div>}\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <h4 className=\"font-semibold mb-2\">Community</h4>\n                                  <div className=\"space-y-2 text-sm\">\n                                    <div><strong>Validations:</strong> {issue.validationCount}</div>\n                                    <div><strong>Comments:</strong> {issue.commentCount}</div>\n                                    {issue.aiConfidence && (\n                                      <div><strong>AI Confidence:</strong> {Math.round(parseFloat(issue.aiConfidence) * 100)}%</div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Description */}\n                              {issue.description && (\n                                <div>\n                                  <h4 className=\"font-semibold mb-2\">Description</h4>\n                                  <p className=\"text-sm text-muted-foreground\">{issue.description}</p>\n                                </div>\n                              )}\n\n                              {/* Comments Section */}\n                              <div>\n                                <h4 className=\"font-semibold mb-4\">Comments ({issueDetails.comments.length})</h4>\n                                \n                                <div className=\"space-y-3 mb-4\">\n                                  {issueDetails.comments.map((comment) => (\n                                    <div \n                                      key={comment.id} \n                                      className={`p-3 rounded-lg ${\n                                        comment.isOfficial ? 'bg-primary/5 border border-primary/20' : 'bg-muted/30'\n                                      }`}\n                                    >\n                                      <div className=\"flex items-center justify-between mb-2\">\n                                        <span className=\"font-medium text-sm\">\n                                          {comment.user.username}\n                                          {comment.isOfficial && (\n                                            <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Official</Badge>\n                                          )}\n                                        </span>\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {formatDistanceToNow(new Date(comment.createdAt))} ago\n                                        </span>\n                                      </div>\n                                      <p className=\"text-sm\">{comment.content}</p>\n                                    </div>\n                                  ))}\n                                </div>\n\n                                {/* Add Comment */}\n                                <div className=\"space-y-2\">\n                                  <Textarea\n                                    placeholder=\"Add a comment...\"\n                                    value={newComment}\n                                    onChange={(e) => setNewComment(e.target.value)}\n                                    data-testid=\"textarea-new-comment\"\n                                  />\n                                  <Button \n                                    onClick={handleAddComment}\n                                    disabled={!newComment.trim() || commentMutation.isPending}\n                                    size=\"sm\"\n                                    data-testid=\"button-add-comment\"\n                                  >\n                                    <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                    Add Comment\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":17187},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/report-page.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/navigation\";\nimport { BottomNav } from \"@/components/bottom-nav\";\nimport { useCamera } from \"@/hooks/use-camera\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Camera, MapPin, Mic, Upload, Loader2, X } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function ReportPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    address: \"\",\n  });\n  \n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [aiAnalysis, setAiAnalysis] = useState<any>(null);\n  \n  const camera = useCamera();\n  const geolocation = useGeolocation();\n\n  // Upload and analyze image\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('image', file);\n      formData.append('description', formData.get('description') || '');\n      \n      const res = await apiRequest(\"POST\", \"/api/upload\", formData);\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      setAiAnalysis(data.analysis);\n      setFormData(prev => ({\n        ...prev,\n        category: data.analysis.category,\n        title: data.analysis.description,\n      }));\n      toast({\n        title: \"Image analyzed!\",\n        description: `AI detected: ${data.analysis.category} with ${Math.round(data.analysis.confidence * 100)}% confidence`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Submit issue report\n  const submitMutation = useMutation({\n    mutationFn: async (issueData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/issues\", issueData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      toast({\n        title: \"Issue reported!\",\n        description: \"Thank you for helping improve your community.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Report failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (file: File) => {\n    setImageFile(file);\n    uploadMutation.mutate(file);\n  };\n\n  const handleCameraCapture = async () => {\n    try {\n      await camera.openCamera();\n    } catch (error) {\n      toast({\n        title: \"Camera error\",\n        description: \"Failed to access camera\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGallerySelect = async () => {\n    try {\n      const imageData = await camera.selectFromGallery();\n      // Convert data URL to file\n      const response = await fetch(imageData);\n      const blob = await response.blob();\n      const file = new File([blob], \"upload.jpg\", { type: \"image/jpeg\" });\n      handleImageUpload(file);\n    } catch (error) {\n      toast({\n        title: \"Selection failed\",\n        description: \"Failed to select image\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!geolocation.latitude || !geolocation.longitude) {\n      toast({\n        title: \"Location required\",\n        description: \"Please enable location services to submit a report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const issueData = {\n      ...formData,\n      latitude: geolocation.latitude.toString(),\n      longitude: geolocation.longitude.toString(),\n      imageUrl: camera.capturedImage,\n      priority: aiAnalysis?.priority || \"medium\",\n      severityScore: aiAnalysis?.severityScore || 50,\n      aiAnalysis,\n      aiConfidence: aiAnalysis?.confidence.toString(),\n      departmentRouted: aiAnalysis?.suggestedDepartment || \"public_works\",\n    };\n\n    submitMutation.mutate(issueData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-6 pb-20 md:pb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Report a Civic Issue</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Photo Section */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-base font-semibold\">Photo Evidence</Label>\n                \n                {!camera.capturedImage && !imageFile && (\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"h-24 flex flex-col space-y-2\"\n                      onClick={handleCameraCapture}\n                      data-testid=\"button-camera\"\n                    >\n                      <Camera className=\"h-6 w-6\" />\n                      <span>Take Photo</span>\n                    </Button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"h-24 flex flex-col space-y-2\"\n                      onClick={handleGallerySelect}\n                      data-testid=\"button-gallery\"\n                    >\n                      <Upload className=\"h-6 w-6\" />\n                      <span>From Gallery</span>\n                    </Button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"h-24 flex flex-col space-y-2\"\n                      disabled\n                      data-testid=\"button-voice\"\n                    >\n                      <Mic className=\"h-6 w-6\" />\n                      <span>Voice Note</span>\n                    </Button>\n                  </div>\n                )}\n\n                {camera.capturedImage && (\n                  <div className=\"relative\">\n                    <img\n                      src={camera.capturedImage}\n                      alt=\"Captured issue\"\n                      className=\"w-full max-w-md h-64 object-cover rounded-lg\"\n                      data-testid=\"captured-image\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute top-2 right-2\"\n                      onClick={() => {\n                        camera.reset();\n                        setImageFile(null);\n                        setAiAnalysis(null);\n                      }}\n                      data-testid=\"button-remove-image\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                )}\n\n                {camera.isOpen && (\n                  <div className=\"space-y-4\">\n                    <video\n                      ref={camera.videoRef}\n                      autoPlay\n                      playsInline\n                      className=\"w-full max-w-md h-64 bg-black rounded-lg\"\n                      data-testid=\"camera-video\"\n                    />\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        type=\"button\"\n                        onClick={camera.capturePhoto}\n                        data-testid=\"button-capture\"\n                      >\n                        Capture\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={camera.closeCamera}\n                        data-testid=\"button-cancel-camera\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {uploadMutation.isPending && (\n                  <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <span>Analyzing image with AI...</span>\n                  </div>\n                )}\n              </div>\n\n              {/* AI Analysis Results */}\n              {aiAnalysis && (\n                <Card className=\"bg-primary/5 border-primary/20\">\n                  <CardContent className=\"pt-6\">\n                    <h3 className=\"font-semibold mb-3 flex items-center\">\n                      <span className=\"mr-2\">🤖</span>\n                      AI Analysis Results\n                    </h3>\n                    <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <strong>Detected Issue:</strong> {aiAnalysis.category}\n                      </div>\n                      <div>\n                        <strong>Confidence:</strong> {Math.round(aiAnalysis.confidence * 100)}%\n                      </div>\n                      <div>\n                        <strong>Priority:</strong> {aiAnalysis.priority}\n                      </div>\n                      <div>\n                        <strong>Suggested Dept:</strong> {aiAnalysis.suggestedDepartment}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Location Section */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-base font-semibold\">Location</Label>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={geolocation.getCurrentPosition}\n                  disabled={geolocation.loading}\n                  className=\"w-full md:w-auto\"\n                  data-testid=\"button-get-location\"\n                >\n                  {geolocation.loading ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Getting location...\n                    </>\n                  ) : (\n                    <>\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      {geolocation.latitude ? \"Location captured\" : \"Get current location\"}\n                    </>\n                  )}\n                </Button>\n\n                {geolocation.error && (\n                  <p className=\"text-sm text-destructive\">{geolocation.error}</p>\n                )}\n\n                {geolocation.latitude && geolocation.longitude && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    📍 {geolocation.latitude.toFixed(6)}, {geolocation.longitude.toFixed(6)}\n                    {geolocation.accuracy && ` (±${Math.round(geolocation.accuracy)}m)`}\n                  </div>\n                )}\n\n                <div>\n                  <Label htmlFor=\"address\">Address (optional)</Label>\n                  <Input\n                    id=\"address\"\n                    placeholder=\"Enter street address or landmark\"\n                    value={formData.address}\n                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                    data-testid=\"input-address\"\n                  />\n                </div>\n              </div>\n\n              {/* Issue Details */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-base font-semibold\">Issue Details</Label>\n                \n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"Select issue category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pothole\">Pothole</SelectItem>\n                      <SelectItem value=\"lighting\">Street Lighting</SelectItem>\n                      <SelectItem value=\"garbage\">Garbage/Waste</SelectItem>\n                      <SelectItem value=\"signage\">Damaged Signage</SelectItem>\n                      <SelectItem value=\"graffiti\">Graffiti</SelectItem>\n                      <SelectItem value=\"flooding\">Flooding</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"title\">Issue Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Brief description of the issue\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    required\n                    data-testid=\"input-title\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Additional Details (optional)</Label>\n                  <Textarea\n                    id=\"description\"\n                    placeholder=\"Provide more details about the issue...\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    data-testid=\"textarea-description\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={submitMutation.isPending || !formData.title || !formData.category}\n                data-testid=\"button-submit-report\"\n              >\n                {submitMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Submitting report...\n                  </>\n                ) : (\n                  \"Submit Report\"\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNav />\n    </div>\n  );\n}\n","size_bytes":14922},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/gemini.ts":{"content":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\n\nexport interface IssueAnalysis {\n  category: string;\n  confidence: number;\n  priority: string;\n  severityScore: number;\n  description: string;\n  suggestedDepartment: string;\n}\n\nexport async function analyzeIssueImage(base64Image: string, userDescription?: string): Promise<IssueAnalysis> {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: \"gemini-2.5-pro\",\n      systemInstruction: \"You are an expert civic infrastructure analyst. Analyze images to classify civic issues and determine their priority and severity.\",\n      generationConfig: {\n        responseMimeType: \"application/json\",\n      }\n    });\n    \n    const prompt = `Analyze this civic issue image and provide a detailed assessment. ${userDescription ? `User description: ${userDescription}` : ''}\n\nPlease respond with JSON in this exact format:\n{\n  \"category\": \"pothole|lighting|garbage|signage|graffiti|flooding|other\",\n  \"confidence\": 0.95,\n  \"priority\": \"low|medium|high|urgent\",\n  \"severityScore\": 85,\n  \"description\": \"Detailed description of the issue\",\n  \"suggestedDepartment\": \"public_works|sanitation|utilities|parks|transportation\"\n}\n\nConsider these factors:\n- Size and extent of damage\n- Safety implications\n- Public accessibility impact\n- Urgency of repair needed`;\n\n    const result = await model.generateContent([\n      {\n        inlineData: {\n          data: base64Image,\n          mimeType: \"image/jpeg\",\n        },\n      },\n      prompt,\n    ]);\n\n    const response = await result.response;\n    const rawJson = response.text();\n    \n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n\n    const analysis = JSON.parse(rawJson);\n    \n    return {\n      category: analysis.category || \"other\",\n      confidence: Math.max(0, Math.min(1, analysis.confidence || 0)),\n      priority: analysis.priority || \"medium\",\n      severityScore: Math.max(0, Math.min(100, analysis.severityScore || 50)),\n      description: analysis.description || \"Issue detected in image\",\n      suggestedDepartment: analysis.suggestedDepartment || \"public_works\"\n    };\n  } catch (error) {\n    console.error(\"AI analysis failed:\", error);\n    return {\n      category: \"other\",\n      confidence: 0,\n      priority: \"medium\",\n      severityScore: 50,\n      description: \"Manual review required - AI analysis unavailable\",\n      suggestedDepartment: \"public_works\"\n    };\n  }\n}\n\n// Enhanced location normalization function\nexport function normalizeLocation(location: string): string {\n  if (!location) return \"\";\n  \n  const normalized = location\n    .toLowerCase()\n    .trim()\n    // Remove common district variations\n    .replace(/\\s+(district|dist|uttar|dakshin|purba|paschim|north|south|east|west)\\s+/g, ' ')\n    // Normalize common place name variations\n    .replace(/\\s+/g, ' ')\n    .replace(/[^\\w\\s]/g, ''); // Remove special characters\n    \n  return normalized;\n}\n\nexport async function findSimilarIssues(\n  newIssue: {\n    title: string;\n    description: string;\n    category: string;\n    location: string;\n    imageUrl?: string;\n  },\n  existingIssues: Array<{\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    location: string;\n    imageUrl?: string;\n    reportedBy: string;\n    createdAt: Date;\n    validationCount: number;\n    status: string;\n  }>\n): Promise<{\n  similarIssues: Array<{\n    id: string;\n    title: string;\n    description: string;\n    similarity: number;\n    reasons: string[];\n    reportedBy: string;\n    createdAt: Date;\n    validationCount: number;\n    status: string;\n  }>;\n}> {\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: \"gemini-2.5-pro\",\n      systemInstruction: `You are an expert at finding similar civic issue reports. You must consider multiple factors:\n1. Location similarity (even with different spellings/districts)\n2. Issue type and category\n3. Description content similarity (same issue from different angles/descriptions)\n4. Visual similarity if images are provided\n5. Temporal context (recent vs old issues)\n\nBe smart about detecting the SAME physical issue reported from different perspectives.`,\n      generationConfig: {\n        responseMimeType: \"application/json\",\n      }\n    });\n    \n    const prompt = `Find similar civic issue reports that might be the same physical problem.\n\nNEW ISSUE:\nTitle: ${newIssue.title}\nCategory: ${newIssue.category}\nDescription: ${newIssue.description}\nLocation: ${newIssue.location}\n${newIssue.imageUrl ? 'Has Image: Yes' : 'Has Image: No'}\n\nEXISTING ISSUES:\n${existingIssues.map((issue, index) => \n  `${index + 1}. ID: ${issue.id}\n  Title: ${issue.title}\n  Category: ${issue.category}\n  Description: ${issue.description}\n  Location: ${issue.location}\n  Status: ${issue.status}\n  Validations: ${issue.validationCount}\n  ${issue.imageUrl ? 'Has Image: Yes' : 'Has Image: No'}`\n).join('\\n\\n')}\n\nINSTRUCTIONS:\n- Look for the SAME physical issue, even if described differently\n- Consider location variations (e.g., \"bailpar dandeli\" = \"bailpar uttar kannada dandeli\")\n- Different photo angles of same pothole/problem should be detected\n- Different wording for same issue should be detected\n- Only flag as similar if it's likely the SAME physical problem\n- Return similarity scores 0.5-0.9 for potentially similar, 0.9+ for very likely same issue\n\nRespond with JSON:\n{\n  \"similarIssues\": [\n    {\n      \"issueIndex\": 1,\n      \"similarity\": 0.85,\n      \"reasons\": [\"Same location area\", \"Same issue type\", \"Similar description\"],\n      \"isLikelySameIssue\": true\n    }\n  ]\n}`;\n\n    const result = await model.generateContent([prompt]);\n    const response = await result.response;\n    const rawJson = response.text();\n    \n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n\n    const result_data = JSON.parse(rawJson);\n    \n    // Process and format the results\n    const similarIssues = (result_data.similarIssues || [])\n      .filter((sim: any) => sim.similarity >= 0.5) // Only include medium to high similarity\n      .map((sim: any) => {\n        const issue = existingIssues[sim.issueIndex - 1];\n        if (!issue) return null;\n        \n        return {\n          id: issue.id,\n          title: issue.title,\n          description: issue.description,\n          similarity: Math.max(0, Math.min(1, sim.similarity || 0)),\n          reasons: sim.reasons || [],\n          reportedBy: issue.reportedBy,\n          createdAt: issue.createdAt,\n          validationCount: issue.validationCount,\n          status: issue.status\n        };\n      })\n      .filter(Boolean)\n      .sort((a: any, b: any) => b.similarity - a.similarity); // Sort by similarity descending\n    \n    return { similarIssues };\n  } catch (error) {\n    console.error(\"Similar issues detection failed:\", error);\n    return { similarIssues: [] };\n  }\n}\n\nexport async function detectDuplicateIssue(\n  description: string, \n  category: string, \n  existingIssues: Array<{title: string, description: string, category: string}>\n): Promise<{isDuplicate: boolean, similarIssueId?: string, confidence: number}> {\n  // Keep the old function for backward compatibility\n  try {\n    const model = genAI.getGenerativeModel({ \n      model: \"gemini-2.5-pro\",\n      systemInstruction: \"You are an expert at detecting duplicate civic issue reports. Consider location proximity, issue type, and description similarity.\",\n      generationConfig: {\n        responseMimeType: \"application/json\",\n      }\n    });\n    \n    const prompt = `Analyze if this new issue report is a duplicate of existing issues.\n\nNew Issue:\nCategory: ${category}\nDescription: ${description}\n\nExisting Issues:\n${existingIssues.map((issue, index) => `${index + 1}. Category: ${issue.category}, Title: ${issue.title}, Description: ${issue.description}`).join('\\n')}\n\nRespond with JSON:\n{\n  \"isDuplicate\": true/false,\n  \"similarIssueIndex\": 1,\n  \"confidence\": 0.95,\n  \"reasoning\": \"explanation\"\n}`;\n\n    const result = await model.generateContent([prompt]);\n    const response = await result.response;\n    const rawJson = response.text();\n    \n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n\n    const result_data = JSON.parse(rawJson);\n    \n    return {\n      isDuplicate: result_data.isDuplicate || false,\n      similarIssueId: result_data.isDuplicate && result_data.similarIssueIndex ? existingIssues[result_data.similarIssueIndex - 1]?.title : undefined,\n      confidence: Math.max(0, Math.min(1, result_data.confidence || 0))\n    };\n  } catch (error) {\n    console.error(\"Duplicate detection failed:\", error);\n    return { isDuplicate: false, confidence: 0 };\n  }\n}","size_bytes":9031},"replit.md":{"content":"# CivicConnect - Smart Civic Issue Reporting Platform\n\n## Overview\n\nCivicConnect is a Progressive Web Application (PWA) designed for crowdsourced civic issue reporting and resolution. The platform enables citizens to report municipal issues (potholes, lighting, garbage, etc.) through a mobile-first interface with AI-powered analysis, while providing municipal staff with a comprehensive dashboard for issue management and analytics.\n\nThe application features real-time issue tracking, AI-powered image classification, gamification elements, and smart routing capabilities to streamline the civic reporting process and improve municipal response times.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **PWA Features**: Service worker implementation for offline support, caching, and push notifications\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy and session-based authentication\n- **Session Management**: Express sessions with PostgreSQL session store\n- **File Handling**: Multer for image uploads with Sharp for image processing\n- **Real-time Communication**: WebSocket server for live updates\n\n### Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Connection**: Neon serverless PostgreSQL through connection pooling\n- **Schema Design**: \n  - Users table with role-based access (citizen, staff, admin)\n  - Issues table with geolocation, AI analysis, and status tracking\n  - Validations table for community verification\n  - Comments, achievements, and notifications tables for engagement\n\n### AI Integration\n- **Image Analysis**: Google Gemini 2.5 Pro for automatic issue classification\n- **Capabilities**: Category detection, priority assessment, severity scoring, and department routing\n- **Processing**: Base64 image encoding with structured JSON responses for consistent analysis\n\n### Geolocation Services\n- **Maps**: Leaflet integration with OpenStreetMap tiles\n- **Location Services**: Browser Geolocation API for automatic position tracking\n- **Spatial Queries**: PostgreSQL spatial capabilities for proximity-based issue discovery\n\n### Authentication & Authorization\n- **Strategy**: Session-based authentication with secure password hashing using scrypt\n- **Role Management**: Three-tier system (citizen, staff, admin) with route protection\n- **Security**: CSRF protection, secure cookies, and input validation with Zod schemas\n\n### File Storage & Media\n- **Image Processing**: Sharp for optimization and resizing\n- **Upload Handling**: Multer with memory storage and file type validation\n- **Size Limits**: 10MB maximum file size with image format restrictions\n\n### Real-time Features\n- **WebSocket Implementation**: Native WebSocket server for live issue updates\n- **Broadcast System**: Real-time notifications for status changes and new reports\n- **Connection Management**: Client reconnection handling and connection state tracking\n\n### Progressive Web App Features\n- **Offline Support**: Service worker with caching strategies for static and dynamic content\n- **Installation**: Browser install prompts with custom installation UI\n- **Push Notifications**: Service worker-based notification system\n- **Responsive Design**: Mobile-first approach with bottom navigation for mobile devices\n\n### Performance Optimizations\n- **Code Splitting**: Vite-based bundling with dynamic imports\n- **Image Optimization**: Sharp processing for optimal file sizes\n- **Caching Strategy**: Multi-tier caching with static and dynamic cache management\n- **Query Optimization**: TanStack Query for efficient data fetching and caching\n\n## External Dependencies\n\n### AI Services\n- **Google Generative AI**: Gemini 2.5 Pro API for image analysis and issue classification\n- **Processing**: Automatic category detection, priority assessment, and department routing\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Session Storage**: PostgreSQL-based session persistence\n\n### Map Services\n- **OpenStreetMap**: Tile server for map rendering\n- **Leaflet**: JavaScript mapping library for interactive map features\n\n### Development Tools\n- **Replit Integration**: Development environment plugins for cartographer and dev banner\n- **TypeScript**: Full type safety across frontend, backend, and shared schemas\n\n### UI Component Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **Shadcn/ui**: Pre-built component system with consistent styling\n- **Lucide React**: Icon library for consistent iconography\n\n### Build & Development\n- **Vite**: Fast build tool with HMR and optimized production builds\n- **ESBuild**: Server-side bundling for production deployment\n- **PostCSS**: CSS processing with Tailwind CSS compilation\n\n### Authentication & Security\n- **Passport.js**: Authentication middleware with local strategy\n- **Express Session**: Session management with PostgreSQL store\n- **Crypto**: Node.js crypto module for secure password hashing","size_bytes":5473},"client/src/components/language-selector.tsx":{"content":"import { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Globe, Check } from 'lucide-react';\n\nconst languages = [\n  { code: 'en', name: 'English', flag: '🇺🇸' },\n  { code: 'es', name: 'Español', flag: '🇪🇸' },\n  { code: 'fr', name: 'Français', flag: '🇫🇷' },\n  { code: 'de', name: 'Deutsch', flag: '🇩🇪' },\n  { code: 'it', name: 'Italiano', flag: '🇮🇹' },\n  { code: 'pt', name: 'Português', flag: '🇧🇷' },\n  { code: 'hi', name: 'हिन्दी', flag: '🇮🇳' },\n  { code: 'ja', name: '日本語', flag: '🇯🇵' },\n  { code: 'zh', name: '中文', flag: '🇨🇳' },\n  { code: 'ar', name: 'العربية', flag: '🇸🇦' },\n  { code: 'ru', name: 'Русский', flag: '🇷🇺' },\n  { code: 'nl', name: 'Nederlands', flag: '🇳🇱' },\n  { code: 'ko', name: '한국어', flag: '🇰🇷' },\n];\n\nexport function LanguageSelector() {\n  const { i18n } = useTranslation();\n  \n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n\n  const changeLanguage = (langCode: string) => {\n    i18n.changeLanguage(langCode);\n    \n    // Update HTML dir attribute for RTL languages\n    if (langCode === 'ar') {\n      document.documentElement.dir = 'rtl';\n    } else {\n      document.documentElement.dir = 'ltr';\n    }\n    \n    // Update HTML lang attribute\n    document.documentElement.lang = langCode;\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"gap-2\"\n          data-testid=\"button-language-selector\"\n        >\n          <Globe className=\"h-4 w-4\" />\n          <span className=\"hidden sm:inline\">{currentLanguage.flag} {currentLanguage.name}</span>\n          <span className=\"sm:hidden\">{currentLanguage.flag}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        {languages.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => changeLanguage(lang.code)}\n            className=\"flex items-center justify-between cursor-pointer\"\n            data-testid={`language-option-${lang.code}`}\n          >\n            <div className=\"flex items-center gap-2\">\n              <span>{lang.flag}</span>\n              <span>{lang.name}</span>\n            </div>\n            {i18n.language === lang.code && (\n              <Check className=\"h-4 w-4 text-primary\" />\n            )}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2746},"client/src/lib/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\n\nconst resources = {\n  en: {\n    translation: {\n      // Navigation & General\n      appName: \"CivicConnect\",\n      home: \"Home\",\n      report: \"Report Issue\",\n      myReports: \"My Reports\", \n      map: \"Map\",\n      admin: \"Admin\",\n      profile: \"Profile\",\n      logout: \"Logout\",\n      login: \"Login\",\n      signup: \"Sign Up\",\n      \n      // Home Page\n      reportIssueTitle: \"Report an Issue\",\n      reportIssueSubtitle: \"Help improve your community with AI-powered reporting\",\n      takePhoto: \"Take Photo\",\n      aiDetectType: \"AI will detect issue type\",\n      gpsLocation: \"GPS Location\",\n      autoTagged: \"Auto-tagged\",\n      voiceInput: \"Voice Input\",\n      speechToText: \"Speech-to-text\",\n      \n      // Community & Gamification\n      communityLeaders: \"Community Leaders\",\n      points: \"Points\",\n      achievements: \"Achievements\",\n      badge: \"Badge\",\n      firstReporter: \"First Reporter\",\n      problemSolver: \"Problem Solver\",\n      communityGuardian: \"Community Guardian\",\n      unlocked: \"Unlocked\",\n      locked: \"Locked\",\n      \n      // Statistics\n      activeReports: \"Active Reports\",\n      inProgress: \"In Progress\", \n      resolved: \"Resolved\",\n      avgResponseTime: \"Avg Response Time\",\n      days: \"days\",\n      \n      // Report Form\n      whatIssue: \"What's the issue?\",\n      issueCategory: \"Issue Category\",\n      selectCategory: \"Select a category\",\n      infrastructure: \"Infrastructure\",\n      environment: \"Environment\",\n      safety: \"Safety\",\n      publicServices: \"Public Services\",\n      other: \"Other\",\n      \n      issueTitle: \"Issue Title\",\n      issueTitlePlaceholder: \"Brief description of the issue\",\n      issueDescription: \"Detailed Description\",\n      issueDescriptionPlaceholder: \"Provide detailed information about the issue\",\n      \n      location: \"Location\",\n      getCurrentLocation: \"Get Current Location\",\n      manualLocation: \"Enter Manual Location\",\n      locationPlaceholder: \"Enter address or landmark\",\n      \n      photo: \"Photo\",\n      takeOrUpload: \"Take a photo or upload from gallery\",\n      uploadPhoto: \"Upload Photo\",\n      retakePhoto: \"Retake Photo\",\n      \n      urgency: \"Urgency Level\",\n      low: \"Low\",\n      medium: \"Medium\",\n      high: \"High\",\n      critical: \"Critical\",\n      \n      anonymous: \"Report Anonymously\",\n      submitReport: \"Submit Report\",\n      submitting: \"Submitting...\",\n      \n      // Duplicate Detection\n      similarIssueFound: \"Similar Issue Found\",\n      duplicateMessage: \"We found a similar issue that might be the same as yours:\",\n      upvoteExisting: \"Upvote Existing Issue\",\n      submitAnyway: \"Submit as New Issue\",\n      reportedBy: \"Reported by\",\n      timeAgoText: \"{{time}} ago\",\n      \n      // PWA Installation\n      installApp: \"Install App\",\n      installPromptTitle: \"Install CivicConnect\",\n      installPromptMessage: \"Install our app for quick access and offline reporting capabilities.\",\n      install: \"Install\",\n      cancel: \"Cancel\",\n      addToHomeScreen: \"Add to Home Screen\",\n      \n      // Issue Status\n      status: {\n        active: \"Active\",\n        inProgress: \"In Progress\", \n        resolved: \"Resolved\",\n        closed: \"Closed\"\n      },\n      \n      // Messages\n      loading: \"Loading...\",\n      error: \"Error\",\n      success: \"Success\",\n      noData: \"No data available\",\n      networkError: \"Network error. Please check your connection.\",\n      locationPermissionDenied: \"Location permission denied\",\n      cameraPermissionDenied: \"Camera permission denied\",\n      \n      // Time\n      timeAgo: {\n        justNow: \"Just now\",\n        minutesAgo: \"{{minutes}} minutes ago\",\n        hoursAgo: \"{{hours}} hours ago\", \n        daysAgo: \"{{days}} days ago\",\n        weeksAgo: \"{{weeks}} weeks ago\",\n        monthsAgo: \"{{months}} months ago\"\n      }\n    }\n  },\n  es: {\n    translation: {\n      // Navigation & General\n      appName: \"CivicConnect\",\n      home: \"Inicio\",\n      report: \"Reportar Problema\",\n      myReports: \"Mis Reportes\",\n      map: \"Mapa\", \n      admin: \"Admin\",\n      profile: \"Perfil\",\n      logout: \"Cerrar Sesión\",\n      login: \"Iniciar Sesión\",\n      signup: \"Registrarse\",\n      \n      // Home Page\n      reportIssueTitle: \"Reportar un Problema\",\n      reportIssueSubtitle: \"Ayuda a mejorar tu comunidad con reportes potenciados por IA\",\n      takePhoto: \"Tomar Foto\",\n      aiDetectType: \"La IA detectará el tipo de problema\",\n      gpsLocation: \"Ubicación GPS\",\n      autoTagged: \"Auto-etiquetado\",\n      voiceInput: \"Entrada de Voz\",\n      speechToText: \"Voz a texto\",\n      \n      // Community & Gamification\n      communityLeaders: \"Líderes de la Comunidad\",\n      points: \"Puntos\",\n      achievements: \"Logros\",\n      badge: \"Insignia\",\n      firstReporter: \"Primer Reportero\",\n      problemSolver: \"Solucionador de Problemas\",\n      communityGuardian: \"Guardián de la Comunidad\",\n      unlocked: \"Desbloqueado\",\n      locked: \"Bloqueado\",\n      \n      // Statistics\n      activeReports: \"Reportes Activos\",\n      inProgress: \"En Progreso\",\n      resolved: \"Resueltos\",\n      avgResponseTime: \"Tiempo Promedio de Respuesta\",\n      days: \"días\",\n      \n      // Report Form\n      whatIssue: \"¿Cuál es el problema?\",\n      issueCategory: \"Categoría del Problema\",\n      selectCategory: \"Selecciona una categoría\",\n      infrastructure: \"Infraestructura\",\n      environment: \"Medio Ambiente\",\n      safety: \"Seguridad\",\n      publicServices: \"Servicios Públicos\",\n      other: \"Otro\",\n      \n      issueTitle: \"Título del Problema\",\n      issueTitlePlaceholder: \"Descripción breve del problema\",\n      issueDescription: \"Descripción Detallada\",\n      issueDescriptionPlaceholder: \"Proporciona información detallada sobre el problema\",\n      \n      location: \"Ubicación\",\n      getCurrentLocation: \"Obtener Ubicación Actual\",\n      manualLocation: \"Ingresar Ubicación Manual\",\n      locationPlaceholder: \"Ingresa dirección o punto de referencia\",\n      \n      photo: \"Foto\",\n      takeOrUpload: \"Toma una foto o sube desde la galería\",\n      uploadPhoto: \"Subir Foto\",\n      retakePhoto: \"Volver a Tomar Foto\",\n      \n      urgency: \"Nivel de Urgencia\",\n      low: \"Bajo\",\n      medium: \"Medio\",\n      high: \"Alto\",\n      critical: \"Crítico\",\n      \n      anonymous: \"Reportar Anónimamente\",\n      submitReport: \"Enviar Reporte\",\n      submitting: \"Enviando...\",\n      \n      // Duplicate Detection\n      similarIssueFound: \"Problema Similar Encontrado\",\n      duplicateMessage: \"Encontramos un problema similar que podría ser el mismo que el tuyo:\",\n      upvoteExisting: \"Votar por Problema Existente\",\n      submitAnyway: \"Enviar como Nuevo Problema\",\n      reportedBy: \"Reportado por\",\n      timeAgoText: \"hace {{time}}\",\n      \n      // PWA Installation\n      installApp: \"Instalar App\",\n      installPromptTitle: \"Instalar CivicConnect\",\n      installPromptMessage: \"Instala nuestra app para acceso rápido y capacidades de reporte offline.\",\n      install: \"Instalar\",\n      cancel: \"Cancelar\",\n      addToHomeScreen: \"Agregar a Pantalla de Inicio\",\n      \n      // Issue Status\n      status: {\n        active: \"Activo\",\n        inProgress: \"En Progreso\",\n        resolved: \"Resuelto\", \n        closed: \"Cerrado\"\n      },\n      \n      // Messages\n      loading: \"Cargando...\",\n      error: \"Error\",\n      success: \"Éxito\",\n      noData: \"No hay datos disponibles\",\n      networkError: \"Error de red. Por favor verifica tu conexión.\",\n      locationPermissionDenied: \"Permiso de ubicación denegado\",\n      cameraPermissionDenied: \"Permiso de cámara denegado\",\n      \n      // Time\n      timeAgo: {\n        justNow: \"Ahora mismo\",\n        minutesAgo: \"hace {{minutes}} minutos\",\n        hoursAgo: \"hace {{hours}} horas\",\n        daysAgo: \"hace {{days}} días\",\n        weeksAgo: \"hace {{weeks}} semanas\",\n        monthsAgo: \"hace {{months}} meses\"\n      }\n    }\n  },\n  fr: {\n    translation: {\n      // Navigation & General\n      appName: \"CivicConnect\",\n      home: \"Accueil\",\n      report: \"Signaler un Problème\",\n      myReports: \"Mes Signalements\",\n      map: \"Carte\",\n      admin: \"Admin\",\n      profile: \"Profil\",\n      logout: \"Se Déconnecter\",\n      login: \"Se Connecter\",\n      signup: \"S'inscrire\",\n      \n      // Home Page\n      reportIssueTitle: \"Signaler un Problème\",\n      reportIssueSubtitle: \"Aidez à améliorer votre communauté avec des rapports alimentés par l'IA\",\n      takePhoto: \"Prendre une Photo\",\n      aiDetectType: \"L'IA détectera le type de problème\",\n      gpsLocation: \"Localisation GPS\",\n      autoTagged: \"Auto-étiquetage\",\n      voiceInput: \"Entrée Vocale\",\n      speechToText: \"Voix vers texte\",\n      \n      // Community & Gamification\n      communityLeaders: \"Leaders de la Communauté\",\n      points: \"Points\",\n      achievements: \"Réalisations\",\n      badge: \"Badge\",\n      firstReporter: \"Premier Rapporteur\",\n      problemSolver: \"Résolveur de Problèmes\",\n      communityGuardian: \"Gardien de la Communauté\",\n      unlocked: \"Débloqué\",\n      locked: \"Verrouillé\",\n      \n      // Statistics\n      activeReports: \"Rapports Actifs\",\n      inProgress: \"En Cours\",\n      resolved: \"Résolus\",\n      avgResponseTime: \"Temps de Réponse Moyen\",\n      days: \"jours\",\n      \n      // Report Form\n      whatIssue: \"Quel est le problème ?\",\n      issueCategory: \"Catégorie du Problème\",\n      selectCategory: \"Sélectionnez une catégorie\",\n      infrastructure: \"Infrastructure\",\n      environment: \"Environnement\",\n      safety: \"Sécurité\",\n      publicServices: \"Services Publics\",\n      other: \"Autre\",\n      \n      issueTitle: \"Titre du Problème\",\n      issueTitlePlaceholder: \"Description brève du problème\",\n      issueDescription: \"Description Détaillée\",\n      issueDescriptionPlaceholder: \"Fournissez des informations détaillées sur le problème\",\n      \n      location: \"Emplacement\",\n      getCurrentLocation: \"Obtenir la Localisation Actuelle\",\n      manualLocation: \"Saisir la Localisation Manuelle\",\n      locationPlaceholder: \"Entrez l'adresse ou le point de repère\",\n      \n      photo: \"Photo\",\n      takeOrUpload: \"Prenez une photo ou téléchargez depuis la galerie\",\n      uploadPhoto: \"Télécharger une Photo\",\n      retakePhoto: \"Reprendre la Photo\",\n      \n      urgency: \"Niveau d'Urgence\",\n      low: \"Faible\",\n      medium: \"Moyen\",\n      high: \"Élevé\",\n      critical: \"Critique\",\n      \n      anonymous: \"Signaler Anonymement\",\n      submitReport: \"Soumettre le Rapport\",\n      submitting: \"Soumission en cours...\",\n      \n      // Duplicate Detection\n      similarIssueFound: \"Problème Similaire Trouvé\",\n      duplicateMessage: \"Nous avons trouvé un problème similaire qui pourrait être le même que le vôtre :\",\n      upvoteExisting: \"Voter pour le Problème Existant\",\n      submitAnyway: \"Soumettre comme Nouveau Problème\",\n      reportedBy: \"Signalé par\",\n      timeAgoText: \"il y a {{time}}\",\n      \n      // PWA Installation\n      installApp: \"Installer l'App\",\n      installPromptTitle: \"Installer CivicConnect\",\n      installPromptMessage: \"Installez notre app pour un accès rapide et des capacités de rapport hors ligne.\",\n      install: \"Installer\",\n      cancel: \"Annuler\",\n      addToHomeScreen: \"Ajouter à l'Écran d'Accueil\",\n      \n      // Issue Status\n      status: {\n        active: \"Actif\",\n        inProgress: \"En Cours\",\n        resolved: \"Résolu\",\n        closed: \"Fermé\"\n      },\n      \n      // Messages\n      loading: \"Chargement...\",\n      error: \"Erreur\",\n      success: \"Succès\",\n      noData: \"Aucune donnée disponible\",\n      networkError: \"Erreur réseau. Veuillez vérifier votre connexion.\",\n      locationPermissionDenied: \"Permission de localisation refusée\",\n      cameraPermissionDenied: \"Permission de caméra refusée\",\n      \n      // Time\n      timeAgo: {\n        justNow: \"À l'instant\",\n        minutesAgo: \"il y a {{minutes}} minutes\",\n        hoursAgo: \"il y a {{hours}} heures\",\n        daysAgo: \"il y a {{days}} jours\",\n        weeksAgo: \"il y a {{weeks}} semaines\",\n        monthsAgo: \"il y a {{months}} mois\"\n      }\n    }\n  },\n  de: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"Startseite\",\n      report: \"Problem melden\",\n      myReports: \"Meine Berichte\",\n      map: \"Karte\",\n      admin: \"Admin\",\n      profile: \"Profil\",\n      logout: \"Abmelden\",\n      login: \"Anmelden\",\n      signup: \"Registrieren\",\n      reportIssueTitle: \"Ein Problem melden\",\n      reportIssueSubtitle: \"Helfen Sie Ihrer Gemeinschaft mit KI-gestützten Berichten\",\n      takePhoto: \"Foto aufnehmen\",\n      aiDetectType: \"KI erkennt Problemtyp\",\n      gpsLocation: \"GPS-Standort\",\n      autoTagged: \"Auto-markiert\",\n      voiceInput: \"Spracheingabe\",\n      speechToText: \"Sprache-zu-Text\",\n      communityLeaders: \"Gemeinschaftsführer\",\n      points: \"Punkte\",\n      achievements: \"Errungenschaften\",\n      badge: \"Abzeichen\",\n      firstReporter: \"Erster Berichterstatter\",\n      problemSolver: \"Problemlöser\",\n      communityGuardian: \"Gemeinschaftswächter\",\n      unlocked: \"Freigeschaltet\",\n      locked: \"Gesperrt\",\n      activeReports: \"Aktive Berichte\",\n      inProgress: \"In Bearbeitung\",\n      resolved: \"Gelöst\",\n      avgResponseTime: \"Durchschnittliche Antwortzeit\",\n      days: \"Tage\",\n      loading: \"Lädt...\",\n      error: \"Fehler\",\n      success: \"Erfolg\"\n    }\n  },\n  it: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"Home\",\n      report: \"Segnala Problema\",\n      myReports: \"I Miei Report\",\n      map: \"Mappa\",\n      admin: \"Admin\",\n      profile: \"Profilo\",\n      logout: \"Esci\",\n      login: \"Accedi\",\n      signup: \"Registrati\",\n      reportIssueTitle: \"Segnala un Problema\",\n      reportIssueSubtitle: \"Aiuta a migliorare la tua comunità con report alimentati dall'IA\",\n      takePhoto: \"Scatta Foto\",\n      aiDetectType: \"L'IA rileverà il tipo di problema\",\n      gpsLocation: \"Posizione GPS\",\n      autoTagged: \"Auto-taggato\",\n      voiceInput: \"Input Vocale\",\n      speechToText: \"Voce in testo\",\n      communityLeaders: \"Leader della Comunità\",\n      points: \"Punti\",\n      achievements: \"Obiettivi\",\n      badge: \"Distintivo\",\n      firstReporter: \"Primo Segnalatore\",\n      problemSolver: \"Risolutore di Problemi\",\n      communityGuardian: \"Guardiano della Comunità\",\n      unlocked: \"Sbloccato\",\n      locked: \"Bloccato\",\n      activeReports: \"Report Attivi\",\n      inProgress: \"In Corso\",\n      resolved: \"Risolti\",\n      avgResponseTime: \"Tempo Medio di Risposta\",\n      days: \"giorni\",\n      loading: \"Caricamento...\",\n      error: \"Errore\",\n      success: \"Successo\"\n    }\n  },\n  pt: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"Início\",\n      report: \"Reportar Problema\",\n      myReports: \"Meus Relatórios\",\n      map: \"Mapa\",\n      admin: \"Admin\",\n      profile: \"Perfil\",\n      logout: \"Sair\",\n      login: \"Entrar\",\n      signup: \"Cadastrar\",\n      reportIssueTitle: \"Reportar um Problema\",\n      reportIssueSubtitle: \"Ajude a melhorar sua comunidade com relatórios alimentados por IA\",\n      takePhoto: \"Tirar Foto\",\n      aiDetectType: \"IA detectará tipo do problema\",\n      gpsLocation: \"Localização GPS\",\n      autoTagged: \"Auto-marcado\",\n      voiceInput: \"Entrada de Voz\",\n      speechToText: \"Voz para texto\",\n      communityLeaders: \"Líderes da Comunidade\",\n      points: \"Pontos\",\n      achievements: \"Conquistas\",\n      badge: \"Distintivo\",\n      firstReporter: \"Primeiro Relator\",\n      problemSolver: \"Solucionador de Problemas\",\n      communityGuardian: \"Guardião da Comunidade\",\n      unlocked: \"Desbloqueado\",\n      locked: \"Bloqueado\",\n      activeReports: \"Relatórios Ativos\",\n      inProgress: \"Em Andamento\",\n      resolved: \"Resolvidos\",\n      avgResponseTime: \"Tempo Médio de Resposta\",\n      days: \"dias\",\n      loading: \"Carregando...\",\n      error: \"Erro\",\n      success: \"Sucesso\"\n    }\n  },\n  hi: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"होम\",\n      report: \"समस्या रिपोर्ट करें\",\n      myReports: \"मेरी रिपोर्ट्स\",\n      map: \"मैप\",\n      admin: \"एडमिन\",\n      profile: \"प्रोफाइल\",\n      logout: \"लॉगआउट\",\n      login: \"लॉगिन\",\n      signup: \"साइन अप\",\n      reportIssueTitle: \"समस्या रिपोर्ट करें\",\n      reportIssueSubtitle: \"AI-संचालित रिपोर्टिंग के साथ अपने समुदाय को बेहतर बनाने में मदद करें\",\n      takePhoto: \"फोटो लें\",\n      aiDetectType: \"AI समस्या का प्रकार पहचानेगा\",\n      gpsLocation: \"GPS स्थान\",\n      autoTagged: \"ऑटो-टैग्ड\",\n      voiceInput: \"वॉयस इनपुट\",\n      speechToText: \"वाक्-से-टेक्स्ट\",\n      communityLeaders: \"समुदायिक नेता\",\n      points: \"अंक\",\n      achievements: \"उपलब्धियां\",\n      badge: \"बैज\",\n      firstReporter: \"पहला रिपोर्टर\",\n      problemSolver: \"समस्या समाधानकर्ता\",\n      communityGuardian: \"समुदायिक संरक्षक\",\n      unlocked: \"अनलॉक्ड\",\n      locked: \"लॉक्ड\",\n      activeReports: \"सक्रिय रिपोर्ट्स\",\n      inProgress: \"प्रगतिशील\",\n      resolved: \"हल किया गया\",\n      avgResponseTime: \"औसत प्रतिक्रिया समय\",\n      days: \"दिन\",\n      loading: \"लोड हो रहा है...\",\n      error: \"त्रुटि\",\n      success: \"सफलता\"\n    }\n  },\n  ja: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"ホーム\",\n      report: \"問題を報告\",\n      myReports: \"マイレポート\",\n      map: \"マップ\",\n      admin: \"管理者\",\n      profile: \"プロフィール\",\n      logout: \"ログアウト\",\n      login: \"ログイン\",\n      signup: \"サインアップ\",\n      reportIssueTitle: \"問題を報告\",\n      reportIssueSubtitle: \"AI搭載レポートでコミュニティの改善に貢献\",\n      takePhoto: \"写真を撮る\",\n      aiDetectType: \"AIが問題タイプを検出\",\n      gpsLocation: \"GPS位置\",\n      autoTagged: \"自動タグ付け\",\n      voiceInput: \"音声入力\",\n      speechToText: \"音声からテキスト\",\n      communityLeaders: \"コミュニティリーダー\",\n      points: \"ポイント\",\n      achievements: \"実績\",\n      badge: \"バッジ\",\n      firstReporter: \"初回報告者\",\n      problemSolver: \"問題解決者\",\n      communityGuardian: \"コミュニティガーディアン\",\n      unlocked: \"アンロック済み\",\n      locked: \"ロック済み\",\n      activeReports: \"アクティブレポート\",\n      inProgress: \"進行中\",\n      resolved: \"解決済み\",\n      avgResponseTime: \"平均応答時間\",\n      days: \"日\",\n      loading: \"読み込み中...\",\n      error: \"エラー\",\n      success: \"成功\"\n    }\n  },\n  zh: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"首页\",\n      report: \"举报问题\",\n      myReports: \"我的举报\",\n      map: \"地图\",\n      admin: \"管理员\",\n      profile: \"个人资料\",\n      logout: \"登出\",\n      login: \"登录\",\n      signup: \"注册\",\n      reportIssueTitle: \"举报问题\",\n      reportIssueSubtitle: \"通过AI驱动的举报帮助改善您的社区\",\n      takePhoto: \"拍照\",\n      aiDetectType: \"AI将检测问题类型\",\n      gpsLocation: \"GPS位置\",\n      autoTagged: \"自动标记\",\n      voiceInput: \"语音输入\",\n      speechToText: \"语音转文字\",\n      communityLeaders: \"社区领袖\",\n      points: \"积分\",\n      achievements: \"成就\",\n      badge: \"徽章\",\n      firstReporter: \"首位举报者\",\n      problemSolver: \"问题解决者\",\n      communityGuardian: \"社区守护者\",\n      unlocked: \"已解锁\",\n      locked: \"已锁定\",\n      activeReports: \"活跃举报\",\n      inProgress: \"进行中\",\n      resolved: \"已解决\",\n      avgResponseTime: \"平均响应时间\",\n      days: \"天\",\n      loading: \"加载中...\",\n      error: \"错误\",\n      success: \"成功\"\n    }\n  },\n  ar: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"الرئيسية\",\n      report: \"إبلاغ عن مشكلة\",\n      myReports: \"تقاريري\",\n      map: \"الخريطة\",\n      admin: \"المشرف\",\n      profile: \"الملف الشخصي\",\n      logout: \"تسجيل الخروج\",\n      login: \"تسجيل الدخول\",\n      signup: \"إنشاء حساب\",\n      reportIssueTitle: \"إبلاغ عن مشكلة\",\n      reportIssueSubtitle: \"ساعد في تحسين مجتمعك بتقارير مدعومة بالذكاء الاصطناعي\",\n      takePhoto: \"التقط صورة\",\n      aiDetectType: \"سيحدد الذكاء الاصطناعي نوع المشكلة\",\n      gpsLocation: \"موقع GPS\",\n      autoTagged: \"وسم تلقائي\",\n      voiceInput: \"إدخال صوتي\",\n      speechToText: \"تحويل الكلام إلى نص\",\n      communityLeaders: \"قادة المجتمع\",\n      points: \"النقاط\",\n      achievements: \"الإنجازات\",\n      badge: \"الشارة\",\n      firstReporter: \"أول مبلغ\",\n      problemSolver: \"حلال المشاكل\",\n      communityGuardian: \"حارس المجتمع\",\n      unlocked: \"مفتوح\",\n      locked: \"مغلق\",\n      activeReports: \"التقارير النشطة\",\n      inProgress: \"قيد التنفيذ\",\n      resolved: \"تم الحل\",\n      avgResponseTime: \"متوسط وقت الاستجابة\",\n      days: \"أيام\",\n      loading: \"جاري التحميل...\",\n      error: \"خطأ\",\n      success: \"نجح\"\n    }\n  },\n  ru: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"Главная\",\n      report: \"Сообщить о проблеме\",\n      myReports: \"Мои отчёты\",\n      map: \"Карта\",\n      admin: \"Админ\",\n      profile: \"Профиль\",\n      logout: \"Выйти\",\n      login: \"Войти\",\n      signup: \"Регистрация\",\n      reportIssueTitle: \"Сообщить о проблеме\",\n      reportIssueSubtitle: \"Помогите улучшить ваше сообщество с отчётами на основе ИИ\",\n      takePhoto: \"Сделать фото\",\n      aiDetectType: \"ИИ определит тип проблемы\",\n      gpsLocation: \"GPS местоположение\",\n      autoTagged: \"Авто-тег\",\n      voiceInput: \"Голосовой ввод\",\n      speechToText: \"Речь в текст\",\n      communityLeaders: \"Лидеры сообщества\",\n      points: \"Очки\",\n      achievements: \"Достижения\",\n      badge: \"Значок\",\n      firstReporter: \"Первый репортёр\",\n      problemSolver: \"Решатель проблем\",\n      communityGuardian: \"Страж сообщества\",\n      unlocked: \"Разблокировано\",\n      locked: \"Заблокировано\",\n      activeReports: \"Активные отчёты\",\n      inProgress: \"В процессе\",\n      resolved: \"Решено\",\n      avgResponseTime: \"Среднее время ответа\",\n      days: \"дней\",\n      loading: \"Загрузка...\",\n      error: \"Ошибка\",\n      success: \"Успех\"\n    }\n  },\n  nl: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"Home\",\n      report: \"Probleem Melden\",\n      myReports: \"Mijn Rapporten\",\n      map: \"Kaart\",\n      admin: \"Admin\",\n      profile: \"Profiel\",\n      logout: \"Uitloggen\",\n      login: \"Inloggen\",\n      signup: \"Aanmelden\",\n      reportIssueTitle: \"Een Probleem Melden\",\n      reportIssueSubtitle: \"Help je gemeenschap verbeteren met AI-aangedreven rapportage\",\n      takePhoto: \"Foto Maken\",\n      aiDetectType: \"AI detecteert probleemtype\",\n      gpsLocation: \"GPS Locatie\",\n      autoTagged: \"Auto-getagd\",\n      voiceInput: \"Spraak Invoer\",\n      speechToText: \"Spraak-naar-tekst\",\n      communityLeaders: \"Gemeenschapsleiders\",\n      points: \"Punten\",\n      achievements: \"Prestaties\",\n      badge: \"Badge\",\n      firstReporter: \"Eerste Melder\",\n      problemSolver: \"Probleemoplosser\",\n      communityGuardian: \"Gemeenschapsbewaker\",\n      unlocked: \"Ontgrendeld\",\n      locked: \"Vergrendeld\",\n      activeReports: \"Actieve Rapporten\",\n      inProgress: \"In Behandeling\",\n      resolved: \"Opgelost\",\n      avgResponseTime: \"Gemiddelde Reactietijd\",\n      days: \"dagen\",\n      loading: \"Laden...\",\n      error: \"Fout\",\n      success: \"Succes\"\n    }\n  },\n  ko: {\n    translation: {\n      appName: \"CivicConnect\",\n      home: \"홈\",\n      report: \"문제 신고\",\n      myReports: \"내 신고\",\n      map: \"지도\",\n      admin: \"관리자\",\n      profile: \"프로필\",\n      logout: \"로그아웃\",\n      login: \"로그인\",\n      signup: \"회원가입\",\n      reportIssueTitle: \"문제 신고\",\n      reportIssueSubtitle: \"AI 기반 신고로 지역 사회 개선에 도움을 주세요\",\n      takePhoto: \"사진 찍기\",\n      aiDetectType: \"AI가 문제 유형을 감지합니다\",\n      gpsLocation: \"GPS 위치\",\n      autoTagged: \"자동 태그\",\n      voiceInput: \"음성 입력\",\n      speechToText: \"음성을 텍스트로\",\n      communityLeaders: \"커뮤니티 리더\",\n      points: \"포인트\",\n      achievements: \"업적\",\n      badge: \"배지\",\n      firstReporter: \"첫 번째 신고자\",\n      problemSolver: \"문제 해결사\",\n      communityGuardian: \"커뮤니티 가디언\",\n      unlocked: \"잠금 해제됨\",\n      locked: \"잠김\",\n      activeReports: \"활성 신고\",\n      inProgress: \"진행 중\",\n      resolved: \"해결됨\",\n      avgResponseTime: \"평균 응답 시간\",\n      days: \"일\",\n      loading: \"로딩 중...\",\n      error: \"오류\",\n      success: \"성공\"\n    }\n  }\n};\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'en',\n    debug: false,\n    \n    interpolation: {\n      escapeValue: false,\n    },\n    \n    detection: {\n      order: ['localStorage', 'navigator', 'htmlTag'],\n      caches: ['localStorage']\n    }\n  });\n\nexport default i18n;","size_bytes":26483},"client/src/components/similar-issues-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  ThumbsUp, \n  Clock, \n  User, \n  MapPin, \n  CheckCircle, \n  AlertTriangle \n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SimilarIssue {\n  id: string;\n  title: string;\n  description: string;\n  similarity: number;\n  reasons: string[];\n  reportedBy: string;\n  createdAt: string;\n  validationCount: number;\n  status: string;\n}\n\ninterface SimilarIssuesDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  similarIssues: SimilarIssue[];\n  submittedIssue: any;\n  onProceedAnyway: () => void;\n}\n\nexport function SimilarIssuesDialog({\n  open,\n  onOpenChange,\n  similarIssues,\n  submittedIssue,\n  onProceedAnyway,\n}: SimilarIssuesDialogProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [upvotingIssues, setUpvotingIssues] = useState<Set<string>>(new Set());\n\n  const upvoteMutation = useMutation({\n    mutationFn: async (issueId: string) => {\n      const response = await fetch(`/api/issues/${issueId}/upvote`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upvote issue');\n      }\n      return response.json();\n    },\n    onSuccess: (_, issueId) => {\n      toast({\n        title: t('success'),\n        description: 'Upvote added successfully!',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/issues'] });\n      setUpvotingIssues(prev => {\n        const next = new Set(prev);\n        next.delete(issueId);\n        return next;\n      });\n    },\n    onError: (error) => {\n      toast({\n        variant: 'destructive',\n        title: t('error'),\n        description: 'Failed to upvote issue',\n      });\n      setUpvotingIssues(new Set());\n    },\n  });\n\n  const handleUpvote = (issueId: string) => {\n    setUpvotingIssues(prev => {\n      const newSet = new Set(prev);\n      newSet.add(issueId);\n      return newSet;\n    });\n    upvoteMutation.mutate(issueId);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'resolved':\n        return 'text-green-600 dark:text-green-400';\n      case 'in_progress':\n        return 'text-blue-600 dark:text-blue-400';\n      case 'submitted':\n        return 'text-orange-600 dark:text-orange-400';\n      default:\n        return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'resolved':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'in_progress':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'submitted':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return t('timeAgo.justNow');\n    if (diffInHours < 24) return t('timeAgo.hoursAgo', { hours: diffInHours });\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return t('timeAgo.daysAgo', { days: diffInDays });\n    \n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return t('timeAgo.weeksAgo', { weeks: diffInWeeks });\n    \n    const diffInMonths = Math.floor(diffInDays / 30);\n    return t('timeAgo.monthsAgo', { months: diffInMonths });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n            {t('similarIssueFound')}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <p className=\"text-muted-foreground\">\n            {t('duplicateMessage')}\n          </p>\n\n          <div className=\"grid gap-4\">\n            {similarIssues.map((issue) => (\n              <Card key={issue.id} className=\"relative\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{issue.title}</CardTitle>\n                      <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <User className=\"h-4 w-4\" />\n                          {t('reportedBy')} {issue.reportedBy}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          {formatTimeAgo(issue.createdAt)}\n                        </div>\n                        <div className={`flex items-center gap-1 ${getStatusColor(issue.status)}`}>\n                          {getStatusIcon(issue.status)}\n                          {t(`status.${issue.status}`)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\">\n                        {Math.round(issue.similarity * 100)}% {t('similar', 'similar')}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm\">{issue.description}</p>\n                  \n                  <div className=\"flex flex-wrap gap-1\">\n                    {issue.reasons.map((reason, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {reason}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <ThumbsUp className=\"h-4 w-4\" />\n                        {issue.validationCount} {t('upvotes', 'upvotes')}\n                      </div>\n                    </div>\n                    \n                    <Button\n                      onClick={() => handleUpvote(issue.id)}\n                      disabled={upvotingIssues.has(issue.id)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"gap-2\"\n                      data-testid={`button-upvote-${issue.id}`}\n                    >\n                      <ThumbsUp className=\"h-4 w-4\" />\n                      {upvotingIssues.has(issue.id) \n                        ? t('upvoting', 'Upvoting...') \n                        : t('upvoteExisting')\n                      }\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            data-testid=\"button-cancel-duplicate\"\n          >\n            {t('cancel')}\n          </Button>\n          <Button\n            onClick={onProceedAnyway}\n            variant=\"default\"\n            data-testid=\"button-submit-anyway\"\n          >\n            {t('submitAnyway')}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8278}},"version":1}